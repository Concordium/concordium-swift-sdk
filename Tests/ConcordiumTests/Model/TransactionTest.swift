@testable import Concordium
import XCTest

let credJson = """
{
"credentialPublicKeys": {
"keys": {
    "0": {
        "schemeId": "Ed25519",
        "verifyKey": "d684ac5fd786d33c82701ce9f05017bb6f3114bec77c0e836e7d5c211de9acc6"
    },
    "1": {
        "schemeId": "Ed25519",
        "verifyKey": "df70d598d7cf8954b7b6d27bee2b94c4f2f5540219573bca70600c7cde39e92d"
    },
    "2": {
        "schemeId": "Ed25519",
        "verifyKey": "6f2da81a8f7d6965d720527d31c05efdb197129ed54fee51500b2c1742b3a43a"
    }
},
"threshold": 2
},
"credId": "a5727a5f217a0abaa6bba7f6037478051a49d5011e045eb0d86fce393e0c7b4a96382c60e09a489ebb6d800dc0d88d05",
"commitments": {
"cmmPrf": "abcdef",
"cmmCredCounter": "2",
"cmmIdCredSecSharingCoeff": ["1", "2", "3", "4", "5"],
"cmmAttributes": {},
"cmmMaxAccounts": "3"
},
"ipIdentity": 0,
"revocationThreshold": 5,
"arData": {
"1": {
    "encIdCredPubShare": "a458d29cdf02ae34d2ae9b11da12a20df1cb2f0051f50547ca975c1916334443f8654198ffd55763274d7663b3f71def89950e178445b2c080de77cbe66bf16716808124af92b99f4d042568a8ac178a51050b04c073e5400a8e89dce61290fd"
},
"2": {
    "encIdCredPubShare": "b84f64cb45ff97d96380dd94324c99f850bcde2cb16eefade2775b2cf0f8183349766468a2ee0f855aa6b7beb585967fa798439b0e02a3181b5b27b22ec4926b1927d4b4c81c6a2dd7e1c850c902c1e3a4d730b0af41ca522d5ccb613416a64f"
},
"3": {
    "encIdCredPubShare": "944c9009adfecee0ad2cf613b73b80a28228e1e1daf6f0d7a7e3d35bc88d18c267835b3e47fc01afc1d51f8639a4cad48aed53c2630f015b9b8eddda5fd93f5856da962456edd05c3a70d4bccf75a552cc0ec4edd65afd7eb526264edb5ff884"
},
"4": {
    "encIdCredPubShare": "a6d8667d09800553890d8f285454825d277c42d55e96ed11774939d333059e63ae5fc72ef6fefbc81c65fa37b1e3763a8b2cef934b1d2ddfd26f8227a074204e3343a4dcd3e17f88838964c30adfeb9b00b12973627178fac4aeb88771d30510"
},
"5": {
    "encIdCredPubShare": "a4f83b6ec95ca1417aa3a90f6108916b10bdbec85a514655f142ed38b02760364246510be006d7d001cc6c6c839bae72899c10ad29ca8feb171330feacf066c88f3b9617ce99ea44e56be8c57b50ea1865ba73585012bbc8b1035e0c73fb557c"
}
},
"policy": {
"validTo": "202205",
"createdAt": "202005",
"revealedAttributes": {
    "lastName": "31"
}
},
"proofs": "8de04f30f49ae527b47849db1b47ce552d7418b80db2cba081fdf3633d5603447ae7ec23d9f7dc1cf5ab1d6b3cdffac396ee4c6c4729fc3f1e9522106aa1ba8c4f520a7723cdb448a0a173e6303668856059fbc451c2e0fad097bea790495141a2777040540cebb08c901d1e6f02558b066270a386f37d1c5e2bc43d9993ddaae856ea4c797dd6a87c2492099e644de98dc05433eedcbb889836585c219c4511e15a0ccd482ce13a6dcf3925972bedc57d39ce7c66dd3f543e2fe6a56c162c28b8787bf461820596b23eee6c8eeccc9033e0a58131680e27eff1abe79335cd839335607ab92da5c59108d4f40d8d550e00010081b4666e437108d43118aa99b49ffd1d0c0ae50582c98ea8e579dcd7915766affc1b7f43c6eacf7f3cb4a5277f364ddf000000000000000581d0c77cfd5d4a2cad61af4e297c3758e9b124e795175f6a38df4359b4a3fdb72a1425b4f3b24c506d3ec1b01f88e9c6b8a09102d73cb8595dd6451b379ea10c448af16240bbb9f17dbdc82cc618b502804ecfae627b1b98dca9caf9f6e58877a42ceb77aec5b8f23b23e1964972a91b7a7a2ba3a26f988b5a8d9686e322be424263a5d7633fcf0bd6c08c01b1ed56c591a5de15fdd9615adea505ce5826ea856cd416d9d9d7cbffa9707b29767d3d828546d0d70dc65548e4f7ebc137161a06a5c244cec74ac7532dfae1a55d6f72b17183cdac5efb6dadb05b5fa9190886cd22dab6af2c529b78c94f172614fb4566fd0a40d21729a8dc162172b391a016010663a8d218e0a2619e3c1078e350171d000000050000000156f626c9797ba29d4f25d0e3fb13bf123fafa0fddd1904e00f8bfbcd58a21d88271593d2ec15a4a5f221e5cb323affe74d3b2fb079d9383e51e4d28a3974909c25f89d29e7d46a0be7d53d06419ecaa25a7d5a0709cc4042530b7a786fcf059f00000002264be8a2a42bc92545f2b3097245c32d73f9af158b2043149ad11dccd18a3e2866a07ff991d62b4e1095e4a38886e039920515645225a4cc7ed1a95dc441c8452b4ba0c6ddd22b18bda5f8f95de768b363c06be021bbd2b3866c19033b07544a00000003264fc3e92b8b4fb305e2ae4fd489185c0b2db6f17fee2b8322a4d616bc6bbdc5646354ab202cca69f8e048818fc1a7cca118c4c781e48717a74a9722b9808d3a396aeba5b3a202c70b80069f49e90abfd8c273f907ed152deef3ca94d152c0ba000000041e7beb80ce73f7cb51af2c7f88343a9034ccd3c9016864a54e53ce62bcb228fc6b0130690cc2f6464b6f15bd46ca1a14a771f9295dc159f1751efc854b112d38704682a1e69833de7d1dcd897530b95425c64a047da9c2eec8f378371e89ac1c0000000512e0ae9fec6bc90a82f401d873d166d37af6c7036fa0e4b7bb165bfb51793a1d31b2ba053a4f1033ce2fba48b5fb9627bfbc54b6b80e4a12f5dad6b5c9a69be21c66db79ea672b27e769417f0580981eb74270588af4d168cb55d35ec07cad5c6371eb5ae9ebcf2e6dc3528e2c23ee60f8457cf0a7ad37ac8a0738a7024154a8000000080757f2f50fbc24693d6123840db7816b061625b5db543cf2dfa0ed97d6a4580f080031487225c5a4c6f8137c6ed22b62e3c7147208335d44e8960a731ee9d9281e36dd40960ff56e1d9f1c6b5a113b2ad7273a13d436a0c907723160d3dd583822ca004f5aa5baed781f60fd517a52476aa1418179cdef8be6e9008b39600864319e1726df94f871aee2503e58b550754857e103c11e61088e2832071d77aae86d910bac00430c87d49fb8fbc1772c380accf943ed7ce8027b7082bc1c0ab96701744a37de324ace32d012eead95938a82a0a5e13100a02e3d3018b7dc30ea9b5ef9a53397eaa75097c94496dff9cc7f4a3306bcb2109add64308f8f0dce7863729995d755f16982168cfd8da56b6d8372a92c1b66dc5e473f20f2cca797cb0021755fb84d154d906dd024909af27df61eba71956790dba63e05d53d3dda18cc164a847e6ea7c85d5bb098a9700fbbe44a14c0ad3740d8676bdf5f658ba833fe2581d28265a98699a42fcc64f0af2594d8de352f169cdef7f9676ede3e29ceb3273329f3141432a0f82fc21b9962886bdf03bcd7c08edf916f7729c83f8dc1af6dbc8baa1999977e65462802c6e079797c8f8a856ed318c140e9d158adc8a7af03bab3027f4c5f38459ad8bee1ca254a05b8e0fc3f3362d0a37230d981ee1dbf505177c36e4cec2c28f25cee5f58b995aa4ae9814ec6dbd8eeaffface9b784ea6c37c4556f98ca84dc87a2aa02c686d624a96897a48146ee84ea7053414685c83e2d054d819295eb2fa7deaebbcce36bd5d0bf616a24027139bd535a87fd6d05541fa7241c2faba915b9efec6f8e18e1aeac96c51f29fdf47297a8dda26624015fa7bbce725d73c6fbfcd992270459e42a4e8c10ecf98c1cb8e92b49588db0ee3c672f0419b96b90bce28005e8ce61ef12db46ea28bf78e069e2906009b836fc03005ff4b9177d0ca17945439c9cbab5c8925b1dee3fcc3f38bf531972c27ca12e2f9f63d10e202dd3d4133e841ff4d18f85699d093be56b420494a16990a005130b016f8c01ece174d5513e67a843388c60a254d720c989fafc3aca223259b78f32159f26539236c7b7f41bc7bac0b705c645a316af1a35542e60b10e668a03881e0f02167738c36bbadd7f2b9ecce6bceea81c2f66c87417e001037d86a20dd592201e2a5e8432d47ea459f5025725a09e2f7d13a5876cb8fc83c6cfd67b143a305204a830c829dbbb57a14dd16ccadfbd2931765e77b75e21050d7a12cb7e3c18e293eb4eb8eb6f347a533231e7f779f635c08baba6971ed89b35c764f3c4c2cc791cc9fc6515a9d0fb4f32d61ce8e553a4d29c24125515885a6ea38446f26011da81a157b898a914542bd13102dc32fef0045d88dfccbff7b8614b35c95e6db61e96d37a22f685d6f5a58173ef1c9d70fce0883dc84609835d57ac8015ba8bdcc62b24fe8c66097a0cfadd4acb90334d03d6b8e47287670dc1bff24563df60aea1cf62d05dad3da072d19b6b15d2f60d5f678652a871a15e5c7cf1424fe0140d3b4772849b099a36c46135fdf1bc54e07871dcfe3cbd84ec5e815ecaa9dc698442506d2bffa7fe29b5de209d8bdebb91ee036c45b44beb7abd6694b15b5f1daa4fd900000004893d20bff691738bc05d5f64ec440ba1b5230a745cd5a1aba5ea5c825fb6c3207cf7c9031b2e0973f71def0c8bd6b6deb31d25df2c11c98d4971c61d74ad9d775b78459bf53f90ca5cf022d79b229a7193a1d8553bab369539bfdfd48979778c86bf2d3dfa160aecab9d2c25b8234a9142393edbc22b13eff31014671f22d33482ed69b305ecb3fcaac42785c4fe5bc496d920d1c56d7c37fb706874c142be02f884955bdedf1d55f810ada375d6d159ec14d4afbc20a4d102f694fb0df8993a8954b5794d6a9674faac3c34d29c893d8fb1fde8f7edfc023a77668dc48d3c7217d2dcc1b3f22609668752f9bebf970d880948ffd35831fa9f6745cc5cc181fb93acf110d05453fd5dcf9d71c052bf8ff2bf9bed978a4afe50bc35de97afb83cb813d25c06794f7c7450c296df24985dda1e7a74eb8e3357bb2582444b54a986cfebde872b47dd83def6f21c736365b7a6184ec3040caa8184ee3dcd05b4cb75d6bc0c159647a59bd26a3ac193b571bd9261c8241ca5d529eab45abd725a8e9d5dea08a4b504b8d0ae5a398f270555e24c013350f77467b2186f3c775b1396a1434f6ec4cf51fa5c6ee8688c6e4c73ec67f1be9c742d3c6ab1c916159191d741"
}
"""

let encoder = JSONEncoder()
let decoder = JSONDecoder()

final class TransactionTest: XCTestCase {
    func testDeployModuleSerialization() throws {
        let t = AccountTransactionPayload.deployModule(WasmModule(version: WasmVersion.v1, source: Data([1, 2, 3, 50])))

        // Generated from serializing payload in rust sdk
        let expected = Data([0, 0, 0, 0, 1, 0, 0, 0, 4, 1, 2, 3, 50])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testInitContractSerialization() throws {
        let modRef = try ModuleReference(fromHex: "c14efbca1dcf314c73cc294cbbf1bd63e3906b20d35442943eb92f52e383fc38")
        let t = try AccountTransactionPayload.initContract(amount: CCD(microCCD: 1234), modRef: modRef, initName: InitName("init_test"), param: Parameter(Data([123, 23, 12, 45, 56])))

        // Generated from serializing payload in rust sdk
        let expected = Data([1, 0, 0, 0, 0, 0, 0, 4, 210, 193, 78, 251, 202, 29, 207, 49, 76, 115, 204, 41, 76, 187, 241, 189, 99, 227, 144, 107, 32, 211, 84, 66, 148, 62, 185, 47, 82, 227, 131, 252, 56, 0, 9, 105, 110, 105, 116, 95, 116, 101, 115, 116, 0, 5, 123, 23, 12, 45, 56])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testUpdateContractSerialization() throws {
        let contractAddress = ContractAddress(index: 123, subindex: 0)
        let t = try AccountTransactionPayload.updateContract(amount: CCD(microCCD: 4321), address: contractAddress, receiveName: ReceiveName("test.function"), message: Parameter(Data([123, 23, 12, 45, 56])))

        // Generated from serializing payload in rust sdk
        let expected = Data([2, 0, 0, 0, 0, 0, 0, 16, 225, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 116, 101, 115, 116, 46, 102, 117, 110, 99, 116, 105, 111, 110, 0, 5, 123, 23, 12, 45, 56])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testTransferSerialization() throws {
        let a = try AccountAddress(base58Check: "35CJPZohio6Ztii2zy1AYzJKvuxbGG44wrBn7hLHiYLoF2nxnh")
        var t = AccountTransactionPayload.transfer(amount: CCD(microCCD: 100), receiver: a, memo: nil)

        // Generated from serializing payload in rust sdk
        var expected = Data([3, 16, 234, 195, 243, 10, 162, 72, 149, 8, 200, 110, 176, 147, 40, 255, 138, 84, 117, 249, 254, 92, 148, 88, 204, 60, 112, 149, 111, 207, 203, 34, 191, 0, 0, 0, 0, 0, 0, 0, 100])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        t = AccountTransactionPayload.transfer(amount: CCD(microCCD: 100), receiver: a, memo: Memo(Data([0, 23, 55])))
        // Generated from serializing payload in rust sdk
        expected = Data([22, 16, 234, 195, 243, 10, 162, 72, 149, 8, 200, 110, 176, 147, 40, 255, 138, 84, 117, 249, 254, 92, 148, 88, 204, 60, 112, 149, 111, 207, 203, 34, 191, 0, 3, 0, 23, 55, 0, 0, 0, 0, 0, 0, 0, 100])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testTransferWithScheduleSerialization() throws {
        let a = try AccountAddress(base58Check: "35CJPZohio6Ztii2zy1AYzJKvuxbGG44wrBn7hLHiYLoF2nxnh")
        let schedule: [ScheduledTransfer] = [ScheduledTransfer(timestamp: 123_456, amount: CCD(microCCD: 23)), ScheduledTransfer(timestamp: 234_456, amount: CCD(microCCD: 1234))]
        var t = AccountTransactionPayload.transferWithSchedule(receiver: a, schedule: schedule)

        // Generated from serializing payload in rust sdk
        var expected = Data([19, 16, 234, 195, 243, 10, 162, 72, 149, 8, 200, 110, 176, 147, 40, 255, 138, 84, 117, 249, 254, 92, 148, 88, 204, 60, 112, 149, 111, 207, 203, 34, 191, 2, 0, 0, 0, 0, 0, 1, 226, 64, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 3, 147, 216, 0, 0, 0, 0, 0, 0, 4, 210])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        t = AccountTransactionPayload.transferWithSchedule(receiver: a, schedule: schedule, memo: Memo(Data([1, 2, 3, 4])))
        // Generated from serializing payload in rust sdk
        expected = Data([24, 16, 234, 195, 243, 10, 162, 72, 149, 8, 200, 110, 176, 147, 40, 255, 138, 84, 117, 249, 254, 92, 148, 88, 204, 60, 112, 149, 111, 207, 203, 34, 191, 0, 4, 1, 2, 3, 4, 2, 0, 0, 0, 0, 0, 1, 226, 64, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 3, 147, 216, 0, 0, 0, 0, 0, 0, 4, 210])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testRegisterDataSerialization() throws {
        let t = try AccountTransactionPayload.registerData(RegisteredData(Data([123, 231, 222, 0, 1, 2])))

        // Generated from serializing payload in rust sdk
        let expected = Data([21, 0, 6, 123, 231, 222, 0, 1, 2])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testTransferToPublicSerialization() throws {
        // The following variables were generated using the rust SDK
        let remainingAmount = Data([152, 42, 172, 135, 45, 247, 101, 240, 62, 167, 48, 72, 158, 57, 227, 117, 102, 82, 163, 65, 59, 215, 239, 167, 154, 88, 54, 99, 61, 17, 246, 44, 33, 224, 1, 251, 29, 115, 231, 200, 33, 248, 30, 116, 189, 205, 255, 205, 161, 32, 186, 235, 210, 21, 97, 88, 174, 247, 132, 24, 71, 255, 175, 166, 118, 180, 239, 152, 15, 32, 240, 239, 88, 194, 171, 175, 130, 168, 79, 83, 172, 41, 101, 149, 116, 243, 38, 79, 244, 203, 40, 138, 136, 38, 86, 21, 167, 124, 78, 40, 196, 63, 68, 82, 119, 153, 232, 152, 229, 135, 248, 7, 197, 245, 132, 60, 229, 14, 38, 199, 144, 42, 166, 66, 173, 205, 182, 78, 101, 23, 172, 253, 119, 245, 157, 110, 97, 69, 128, 33, 52, 55, 149, 78, 153, 219, 209, 88, 152, 222, 31, 186, 168, 175, 149, 119, 33, 67, 251, 74, 197, 192, 151, 200, 88, 25, 237, 16, 109, 85, 97, 130, 172, 145, 1, 163, 20, 9, 228, 213, 13, 160, 144, 193, 21, 33, 237, 145, 206, 161, 98, 187])
        let transferAmount = CCD(microCCD: 1_575_170_280_934_013_993)
        let index: UInt64 = 827_975_603_961_802_779
        let proof = Data([44, 6, 123, 161, 10, 55, 193, 218, 243, 86, 86, 47, 52, 225, 68, 174, 209, 79, 37, 35, 19, 85, 139, 89, 125, 71, 239, 195, 118, 28, 0, 79, 107, 61, 158, 206, 19, 77, 102, 10, 14, 112, 83, 231, 68, 46, 8, 162, 40, 46, 17, 158, 72, 52, 159, 184, 206, 81, 22, 79, 165, 34, 31, 193, 0, 0, 0, 1, 108, 249, 82, 182, 203, 100, 13, 191, 169, 82, 88, 51, 133, 204, 63, 252, 185, 213, 242, 237, 83, 56, 234, 88, 155, 95, 39, 210, 164, 23, 250, 99, 57, 226, 161, 244, 221, 118, 67, 74, 38, 157, 81, 179, 27, 232, 207, 27, 18, 173, 83, 128, 36, 208, 10, 170, 87, 114, 84, 240, 100, 196, 245, 137, 0, 0, 0, 2, 40, 195, 133, 183, 176, 103, 51, 44, 48, 86, 216, 230, 4, 217, 132, 121, 179, 19, 189, 172, 209, 20, 36, 179, 182, 82, 47, 4, 252, 155, 87, 32, 34, 209, 21, 46, 249, 4, 103, 142, 94, 16, 196, 2, 173, 228, 76, 201, 60, 191, 161, 187, 194, 66, 71, 49, 16, 101, 253, 150, 16, 129, 135, 235, 73, 243, 165, 139, 75, 227, 45, 145, 14, 157, 205, 102, 48, 94, 17, 132, 144, 209, 254, 115, 157, 76, 245, 99, 50, 41, 213, 229, 121, 49, 109, 56, 103, 10, 98, 24, 245, 130, 140, 227, 81, 158, 67, 251, 40, 238, 235, 67, 153, 100, 61, 91, 235, 2, 249, 229, 126, 64, 103, 32, 228, 58, 115, 218, 135, 31, 229, 166, 211, 13, 152, 223, 182, 20, 206, 229, 105, 252, 222, 108, 67, 139, 27, 224, 64, 214, 18, 135, 119, 22, 125, 58, 179, 87, 13, 166, 67, 70, 34, 167, 169, 177, 42, 120, 50, 140, 97, 66, 103, 142, 215, 60, 130, 94, 139, 49, 33, 65, 184, 5, 88, 72, 200, 222, 148, 63, 249, 244, 186, 122, 70, 241, 36, 50, 144, 94, 127, 96, 12, 211, 20, 154, 140, 244, 134, 249, 106, 240, 5, 3, 6, 47, 1, 81, 155, 196, 185, 14, 177, 113, 141, 156, 87, 234, 145, 149, 1, 197, 34, 138, 189, 177, 194, 45, 238, 195, 154, 162, 233, 255, 167, 0, 188, 177, 128, 0, 128, 161, 169, 112, 223, 255, 70, 143, 249, 14, 150, 128, 218, 9, 41, 59, 165, 163, 237, 59, 71, 135, 138, 245, 160, 56, 193, 52, 222, 207, 152, 216, 145, 255, 161, 175, 150, 139, 38, 167, 116, 23, 247, 59, 34, 192, 24, 52, 77, 246, 113, 93, 73, 51, 24, 17, 74, 75, 13, 34, 134, 67, 123, 77, 151, 111, 5, 223, 140, 117, 64, 210, 209, 91, 150, 239, 11, 145, 175, 51, 146, 33, 213, 161, 189, 27, 6, 21, 90, 138, 191, 72, 3, 31, 25, 85, 162, 19, 86, 15, 100, 182, 82, 117, 78, 22, 200, 33, 176, 36, 137, 58, 147, 139, 157, 127, 159, 143, 206, 102, 194, 178, 193, 149, 136, 47, 68, 243, 71, 219, 189, 123, 155, 2, 56, 182, 21, 49, 32, 19, 158, 6, 116, 149, 97, 145, 133, 119, 127, 72, 226, 97, 99, 176, 191, 92, 254, 154, 210, 123, 42, 223, 173, 19, 79, 38, 0, 0, 0, 6, 132, 57, 77, 169, 163, 225, 41, 244, 118, 130, 25, 135, 181, 155, 101, 8, 12, 123, 19, 59, 167, 141, 3, 46, 87, 158, 63, 38, 157, 14, 192, 133, 60, 21, 101, 211, 204, 31, 218, 64, 174, 23, 251, 177, 214, 170, 93, 24, 172, 237, 210, 198, 177, 70, 111, 90, 91, 232, 65, 130, 140, 192, 186, 209, 158, 85, 29, 111, 136, 4, 107, 220, 185, 125, 149, 107, 213, 233, 59, 124, 44, 148, 41, 117, 32, 234, 49, 247, 10, 73, 46, 197, 157, 6, 104, 184, 171, 191, 10, 157, 191, 172, 72, 97, 96, 27, 134, 127, 117, 41, 6, 231, 153, 229, 251, 115, 103, 119, 137, 11, 24, 101, 235, 174, 174, 8, 31, 113, 15, 203, 166, 57, 160, 190, 31, 11, 98, 240, 205, 187, 102, 133, 100, 147, 163, 50, 163, 68, 219, 197, 11, 242, 89, 207, 114, 22, 153, 151, 119, 249, 60, 39, 108, 182, 134, 187, 166, 161, 156, 13, 146, 190, 166, 106, 83, 172, 59, 214, 227, 71, 69, 188, 13, 175, 13, 98, 143, 225, 240, 28, 41, 229, 150, 252, 126, 32, 36, 192, 243, 71, 34, 154, 189, 126, 231, 181, 136, 55, 14, 49, 225, 136, 45, 120, 66, 199, 169, 213, 137, 88, 104, 78, 255, 87, 28, 22, 147, 72, 167, 31, 75, 103, 85, 67, 1, 10, 18, 112, 151, 196, 130, 178, 42, 159, 241, 162, 85, 209, 93, 220, 42, 54, 72, 125, 32, 199, 115, 147, 87, 87, 222, 139, 33, 107, 150, 42, 236, 29, 194, 253, 104, 206, 253, 184, 6, 192, 184, 219, 188, 207, 254, 114, 175, 123, 133, 86, 121, 224, 164, 115, 244, 124, 43, 132, 18, 216, 252, 240, 47, 69, 215, 147, 69, 114, 28, 23, 74, 46, 101, 240, 237, 229, 36, 7, 50, 215, 105, 93, 92, 227, 38, 80, 43, 231, 50, 183, 134, 254, 85, 111, 83, 246, 241, 182, 135, 4, 162, 131, 163, 123, 41, 133, 249, 247, 83, 214, 240, 224, 175, 111, 139, 54, 155, 147, 132, 17, 234, 137, 188, 240, 251, 113, 223, 51, 139, 113, 59, 137, 71, 74, 19, 19, 14, 160, 142, 230, 187, 135, 243, 16, 99, 79, 198, 93, 185, 79, 123, 144, 70, 43, 37, 185, 54, 159, 145, 47, 234, 165, 18, 96, 149, 46, 90, 1, 137, 117, 176, 235, 205, 34, 191, 32, 133, 93, 53, 80, 110, 228, 239, 134, 132, 139, 179, 145, 189, 233, 200, 87, 246, 80, 194, 97, 143, 190, 232, 215, 247, 178, 246, 228, 123, 160, 192, 214, 61, 86, 201, 121, 195, 251, 117, 7, 87, 42, 64, 113, 252, 127, 1, 207, 167, 6, 216, 95, 36, 20, 160, 191, 254, 95, 58, 162, 22, 67, 87, 235, 120, 34, 202, 245, 165, 42, 172, 65, 139, 182, 242, 57, 76, 54, 219, 64, 122, 43, 23, 98, 196, 100, 129, 132, 2, 86, 221, 195, 83, 222, 22, 84, 130, 213, 19, 179, 172, 109, 1, 250, 211, 42, 154, 156, 224, 189, 76, 0, 132, 250, 33, 140, 176, 119, 4, 153, 121, 180, 39, 85, 75, 178, 170, 25, 229, 69, 171, 140, 46, 177, 249, 163, 132, 165, 45, 208, 109, 225, 190, 206, 252, 172, 124, 164, 180, 133, 226, 121, 112, 64, 108, 131, 200, 47, 115, 106, 13, 19, 136, 162, 46, 55, 65, 136, 80, 100, 228, 176, 74, 249, 111, 245, 135, 47, 127, 71, 33, 63, 6, 249, 231, 57, 112, 194, 244, 128, 250, 221, 53, 184, 185, 204, 3, 18, 240, 214, 108, 254, 218, 94, 93, 132, 133, 3, 79, 149, 135, 192, 160, 22, 226, 135, 103, 51, 26, 248, 24, 50, 189, 41, 82, 123, 125, 181])

        let t = AccountTransactionPayload.transferToPublic(SecToPubTransferData(remainingAmount: remainingAmount, transferAmount: transferAmount, index: index, proof: proof))

        let expected = Data([18, 152, 42, 172, 135, 45, 247, 101, 240, 62, 167, 48, 72, 158, 57, 227, 117, 102, 82, 163, 65, 59, 215, 239, 167, 154, 88, 54, 99, 61, 17, 246, 44, 33, 224, 1, 251, 29, 115, 231, 200, 33, 248, 30, 116, 189, 205, 255, 205, 161, 32, 186, 235, 210, 21, 97, 88, 174, 247, 132, 24, 71, 255, 175, 166, 118, 180, 239, 152, 15, 32, 240, 239, 88, 194, 171, 175, 130, 168, 79, 83, 172, 41, 101, 149, 116, 243, 38, 79, 244, 203, 40, 138, 136, 38, 86, 21, 167, 124, 78, 40, 196, 63, 68, 82, 119, 153, 232, 152, 229, 135, 248, 7, 197, 245, 132, 60, 229, 14, 38, 199, 144, 42, 166, 66, 173, 205, 182, 78, 101, 23, 172, 253, 119, 245, 157, 110, 97, 69, 128, 33, 52, 55, 149, 78, 153, 219, 209, 88, 152, 222, 31, 186, 168, 175, 149, 119, 33, 67, 251, 74, 197, 192, 151, 200, 88, 25, 237, 16, 109, 85, 97, 130, 172, 145, 1, 163, 20, 9, 228, 213, 13, 160, 144, 193, 21, 33, 237, 145, 206, 161, 98, 187, 21, 220, 33, 6, 95, 210, 252, 41, 11, 125, 143, 108, 204, 213, 48, 27, 44, 6, 123, 161, 10, 55, 193, 218, 243, 86, 86, 47, 52, 225, 68, 174, 209, 79, 37, 35, 19, 85, 139, 89, 125, 71, 239, 195, 118, 28, 0, 79, 107, 61, 158, 206, 19, 77, 102, 10, 14, 112, 83, 231, 68, 46, 8, 162, 40, 46, 17, 158, 72, 52, 159, 184, 206, 81, 22, 79, 165, 34, 31, 193, 0, 0, 0, 1, 108, 249, 82, 182, 203, 100, 13, 191, 169, 82, 88, 51, 133, 204, 63, 252, 185, 213, 242, 237, 83, 56, 234, 88, 155, 95, 39, 210, 164, 23, 250, 99, 57, 226, 161, 244, 221, 118, 67, 74, 38, 157, 81, 179, 27, 232, 207, 27, 18, 173, 83, 128, 36, 208, 10, 170, 87, 114, 84, 240, 100, 196, 245, 137, 0, 0, 0, 2, 40, 195, 133, 183, 176, 103, 51, 44, 48, 86, 216, 230, 4, 217, 132, 121, 179, 19, 189, 172, 209, 20, 36, 179, 182, 82, 47, 4, 252, 155, 87, 32, 34, 209, 21, 46, 249, 4, 103, 142, 94, 16, 196, 2, 173, 228, 76, 201, 60, 191, 161, 187, 194, 66, 71, 49, 16, 101, 253, 150, 16, 129, 135, 235, 73, 243, 165, 139, 75, 227, 45, 145, 14, 157, 205, 102, 48, 94, 17, 132, 144, 209, 254, 115, 157, 76, 245, 99, 50, 41, 213, 229, 121, 49, 109, 56, 103, 10, 98, 24, 245, 130, 140, 227, 81, 158, 67, 251, 40, 238, 235, 67, 153, 100, 61, 91, 235, 2, 249, 229, 126, 64, 103, 32, 228, 58, 115, 218, 135, 31, 229, 166, 211, 13, 152, 223, 182, 20, 206, 229, 105, 252, 222, 108, 67, 139, 27, 224, 64, 214, 18, 135, 119, 22, 125, 58, 179, 87, 13, 166, 67, 70, 34, 167, 169, 177, 42, 120, 50, 140, 97, 66, 103, 142, 215, 60, 130, 94, 139, 49, 33, 65, 184, 5, 88, 72, 200, 222, 148, 63, 249, 244, 186, 122, 70, 241, 36, 50, 144, 94, 127, 96, 12, 211, 20, 154, 140, 244, 134, 249, 106, 240, 5, 3, 6, 47, 1, 81, 155, 196, 185, 14, 177, 113, 141, 156, 87, 234, 145, 149, 1, 197, 34, 138, 189, 177, 194, 45, 238, 195, 154, 162, 233, 255, 167, 0, 188, 177, 128, 0, 128, 161, 169, 112, 223, 255, 70, 143, 249, 14, 150, 128, 218, 9, 41, 59, 165, 163, 237, 59, 71, 135, 138, 245, 160, 56, 193, 52, 222, 207, 152, 216, 145, 255, 161, 175, 150, 139, 38, 167, 116, 23, 247, 59, 34, 192, 24, 52, 77, 246, 113, 93, 73, 51, 24, 17, 74, 75, 13, 34, 134, 67, 123, 77, 151, 111, 5, 223, 140, 117, 64, 210, 209, 91, 150, 239, 11, 145, 175, 51, 146, 33, 213, 161, 189, 27, 6, 21, 90, 138, 191, 72, 3, 31, 25, 85, 162, 19, 86, 15, 100, 182, 82, 117, 78, 22, 200, 33, 176, 36, 137, 58, 147, 139, 157, 127, 159, 143, 206, 102, 194, 178, 193, 149, 136, 47, 68, 243, 71, 219, 189, 123, 155, 2, 56, 182, 21, 49, 32, 19, 158, 6, 116, 149, 97, 145, 133, 119, 127, 72, 226, 97, 99, 176, 191, 92, 254, 154, 210, 123, 42, 223, 173, 19, 79, 38, 0, 0, 0, 6, 132, 57, 77, 169, 163, 225, 41, 244, 118, 130, 25, 135, 181, 155, 101, 8, 12, 123, 19, 59, 167, 141, 3, 46, 87, 158, 63, 38, 157, 14, 192, 133, 60, 21, 101, 211, 204, 31, 218, 64, 174, 23, 251, 177, 214, 170, 93, 24, 172, 237, 210, 198, 177, 70, 111, 90, 91, 232, 65, 130, 140, 192, 186, 209, 158, 85, 29, 111, 136, 4, 107, 220, 185, 125, 149, 107, 213, 233, 59, 124, 44, 148, 41, 117, 32, 234, 49, 247, 10, 73, 46, 197, 157, 6, 104, 184, 171, 191, 10, 157, 191, 172, 72, 97, 96, 27, 134, 127, 117, 41, 6, 231, 153, 229, 251, 115, 103, 119, 137, 11, 24, 101, 235, 174, 174, 8, 31, 113, 15, 203, 166, 57, 160, 190, 31, 11, 98, 240, 205, 187, 102, 133, 100, 147, 163, 50, 163, 68, 219, 197, 11, 242, 89, 207, 114, 22, 153, 151, 119, 249, 60, 39, 108, 182, 134, 187, 166, 161, 156, 13, 146, 190, 166, 106, 83, 172, 59, 214, 227, 71, 69, 188, 13, 175, 13, 98, 143, 225, 240, 28, 41, 229, 150, 252, 126, 32, 36, 192, 243, 71, 34, 154, 189, 126, 231, 181, 136, 55, 14, 49, 225, 136, 45, 120, 66, 199, 169, 213, 137, 88, 104, 78, 255, 87, 28, 22, 147, 72, 167, 31, 75, 103, 85, 67, 1, 10, 18, 112, 151, 196, 130, 178, 42, 159, 241, 162, 85, 209, 93, 220, 42, 54, 72, 125, 32, 199, 115, 147, 87, 87, 222, 139, 33, 107, 150, 42, 236, 29, 194, 253, 104, 206, 253, 184, 6, 192, 184, 219, 188, 207, 254, 114, 175, 123, 133, 86, 121, 224, 164, 115, 244, 124, 43, 132, 18, 216, 252, 240, 47, 69, 215, 147, 69, 114, 28, 23, 74, 46, 101, 240, 237, 229, 36, 7, 50, 215, 105, 93, 92, 227, 38, 80, 43, 231, 50, 183, 134, 254, 85, 111, 83, 246, 241, 182, 135, 4, 162, 131, 163, 123, 41, 133, 249, 247, 83, 214, 240, 224, 175, 111, 139, 54, 155, 147, 132, 17, 234, 137, 188, 240, 251, 113, 223, 51, 139, 113, 59, 137, 71, 74, 19, 19, 14, 160, 142, 230, 187, 135, 243, 16, 99, 79, 198, 93, 185, 79, 123, 144, 70, 43, 37, 185, 54, 159, 145, 47, 234, 165, 18, 96, 149, 46, 90, 1, 137, 117, 176, 235, 205, 34, 191, 32, 133, 93, 53, 80, 110, 228, 239, 134, 132, 139, 179, 145, 189, 233, 200, 87, 246, 80, 194, 97, 143, 190, 232, 215, 247, 178, 246, 228, 123, 160, 192, 214, 61, 86, 201, 121, 195, 251, 117, 7, 87, 42, 64, 113, 252, 127, 1, 207, 167, 6, 216, 95, 36, 20, 160, 191, 254, 95, 58, 162, 22, 67, 87, 235, 120, 34, 202, 245, 165, 42, 172, 65, 139, 182, 242, 57, 76, 54, 219, 64, 122, 43, 23, 98, 196, 100, 129, 132, 2, 86, 221, 195, 83, 222, 22, 84, 130, 213, 19, 179, 172, 109, 1, 250, 211, 42, 154, 156, 224, 189, 76, 0, 132, 250, 33, 140, 176, 119, 4, 153, 121, 180, 39, 85, 75, 178, 170, 25, 229, 69, 171, 140, 46, 177, 249, 163, 132, 165, 45, 208, 109, 225, 190, 206, 252, 172, 124, 164, 180, 133, 226, 121, 112, 64, 108, 131, 200, 47, 115, 106, 13, 19, 136, 162, 46, 55, 65, 136, 80, 100, 228, 176, 74, 249, 111, 245, 135, 47, 127, 71, 33, 63, 6, 249, 231, 57, 112, 194, 244, 128, 250, 221, 53, 184, 185, 204, 3, 18, 240, 214, 108, 254, 218, 94, 93, 132, 133, 3, 79, 149, 135, 192, 160, 22, 226, 135, 103, 51, 26, 248, 24, 50, 189, 41, 82, 123, 125, 181])

        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testUpdateCredentialKeysSerialization() throws {
        let credId = try CredentialRegistrationID(Data(hex: "a5727a5f217a0abaa6bba7f6037478051a49d5011e045eb0d86fce393e0c7b4a96382c60e09a489ebb6d800dc0d88d05"))
        let keys = try CredentialPublicKeys(keys: [2: VerifyKey(ed25519KeyHex: "d684ac5fd786d33c82701ce9f05017bb6f3114bec77c0e836e7d5c211de9acc6")], threshold: 1)
        let t = AccountTransactionPayload.updateCredentialKeys(credId: credId, keys: keys)

        let expected = Data([13, 165, 114, 122, 95, 33, 122, 10, 186, 166, 187, 167, 246, 3, 116, 120, 5, 26, 73, 213, 1, 30, 4, 94, 176, 216, 111, 206, 57, 62, 12, 123, 74, 150, 56, 44, 96, 224, 154, 72, 158, 187, 109, 128, 13, 192, 216, 141, 5, 1, 2, 0, 214, 132, 172, 95, 215, 134, 211, 60, 130, 112, 28, 233, 240, 80, 23, 187, 111, 49, 20, 190, 199, 124, 14, 131, 110, 125, 92, 33, 29, 233, 172, 198, 1])
        XCTAssertEqual(t.serialize(), expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testCredentialDeploymentInfoCoding() throws {
        let credJson = credJson.data(using: .utf8)!
        let decoder = JSONDecoder()
        let original = try decoder.decode(CredentialDeploymentInfo.self, from: credJson)

        let encoder = JSONEncoder()
        let json = try encoder.encode(original)
        let value = try decoder.decode(CredentialDeploymentInfo.self, from: json)

        XCTAssertEqual(value, original)
    }

    func testUpdateCredentialsSerialization() throws {
        let credJson = credJson.data(using: .utf8)!
        let decoder = JSONDecoder()
        let cred = try decoder.decode(CredentialDeploymentInfo.self, from: credJson)
        let newCredInfos = [0 as UInt8: cred]
        let credId = try CredentialRegistrationID(Data(hex: "a5727a5f217a0abaa6bba7f6037478051a49d5011e045eb0d86fce393e0c7b4a96382c60e09a489ebb6d800dc0d88d05"))

        let t = AccountTransactionPayload.updateCredentials(newCredInfos: newCredInfos, removeCredIds: [credId], newThreshold: 5)
        let expected = Data([20, 1, 0, 3, 0, 0, 214, 132, 172, 95, 215, 134, 211, 60, 130, 112, 28, 233, 240, 80, 23, 187, 111, 49, 20, 190, 199, 124, 14, 131, 110, 125, 92, 33, 29, 233, 172, 198, 1, 0, 223, 112, 213, 152, 215, 207, 137, 84, 183, 182, 210, 123, 238, 43, 148, 196, 242, 245, 84, 2, 25, 87, 59, 202, 112, 96, 12, 124, 222, 57, 233, 45, 2, 0, 111, 45, 168, 26, 143, 125, 105, 101, 215, 32, 82, 125, 49, 192, 94, 253, 177, 151, 18, 158, 213, 79, 238, 81, 80, 11, 44, 23, 66, 179, 164, 58, 2, 165, 114, 122, 95, 33, 122, 10, 186, 166, 187, 167, 246, 3, 116, 120, 5, 26, 73, 213, 1, 30, 4, 94, 176, 216, 111, 206, 57, 62, 12, 123, 74, 150, 56, 44, 96, 224, 154, 72, 158, 187, 109, 128, 13, 192, 216, 141, 5, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 1, 164, 88, 210, 156, 223, 2, 174, 52, 210, 174, 155, 17, 218, 18, 162, 13, 241, 203, 47, 0, 81, 245, 5, 71, 202, 151, 92, 25, 22, 51, 68, 67, 248, 101, 65, 152, 255, 213, 87, 99, 39, 77, 118, 99, 179, 247, 29, 239, 137, 149, 14, 23, 132, 69, 178, 192, 128, 222, 119, 203, 230, 107, 241, 103, 22, 128, 129, 36, 175, 146, 185, 159, 77, 4, 37, 104, 168, 172, 23, 138, 81, 5, 11, 4, 192, 115, 229, 64, 10, 142, 137, 220, 230, 18, 144, 253, 0, 0, 0, 2, 184, 79, 100, 203, 69, 255, 151, 217, 99, 128, 221, 148, 50, 76, 153, 248, 80, 188, 222, 44, 177, 110, 239, 173, 226, 119, 91, 44, 240, 248, 24, 51, 73, 118, 100, 104, 162, 238, 15, 133, 90, 166, 183, 190, 181, 133, 150, 127, 167, 152, 67, 155, 14, 2, 163, 24, 27, 91, 39, 178, 46, 196, 146, 107, 25, 39, 212, 180, 200, 28, 106, 45, 215, 225, 200, 80, 201, 2, 193, 227, 164, 215, 48, 176, 175, 65, 202, 82, 45, 92, 203, 97, 52, 22, 166, 79, 0, 0, 0, 3, 148, 76, 144, 9, 173, 254, 206, 224, 173, 44, 246, 19, 183, 59, 128, 162, 130, 40, 225, 225, 218, 246, 240, 215, 167, 227, 211, 91, 200, 141, 24, 194, 103, 131, 91, 62, 71, 252, 1, 175, 193, 213, 31, 134, 57, 164, 202, 212, 138, 237, 83, 194, 99, 15, 1, 91, 155, 142, 221, 218, 95, 217, 63, 88, 86, 218, 150, 36, 86, 237, 208, 92, 58, 112, 212, 188, 207, 117, 165, 82, 204, 14, 196, 237, 214, 90, 253, 126, 181, 38, 38, 78, 219, 95, 248, 132, 0, 0, 0, 4, 166, 216, 102, 125, 9, 128, 5, 83, 137, 13, 143, 40, 84, 84, 130, 93, 39, 124, 66, 213, 94, 150, 237, 17, 119, 73, 57, 211, 51, 5, 158, 99, 174, 95, 199, 46, 246, 254, 251, 200, 28, 101, 250, 55, 177, 227, 118, 58, 139, 44, 239, 147, 75, 29, 45, 223, 210, 111, 130, 39, 160, 116, 32, 78, 51, 67, 164, 220, 211, 225, 127, 136, 131, 137, 100, 195, 10, 223, 235, 155, 0, 177, 41, 115, 98, 113, 120, 250, 196, 174, 184, 135, 113, 211, 5, 16, 0, 0, 0, 5, 164, 248, 59, 110, 201, 92, 161, 65, 122, 163, 169, 15, 97, 8, 145, 107, 16, 189, 190, 200, 90, 81, 70, 85, 241, 66, 237, 56, 176, 39, 96, 54, 66, 70, 81, 11, 224, 6, 215, 208, 1, 204, 108, 108, 131, 155, 174, 114, 137, 156, 16, 173, 41, 202, 143, 235, 23, 19, 48, 254, 172, 240, 102, 200, 143, 59, 150, 23, 206, 153, 234, 68, 229, 107, 232, 197, 123, 80, 234, 24, 101, 186, 115, 88, 80, 18, 187, 200, 177, 3, 94, 12, 115, 251, 85, 124, 7, 230, 5, 7, 228, 5, 0, 1, 1, 2, 51, 49, 0, 0, 10, 159, 141, 224, 79, 48, 244, 154, 229, 39, 180, 120, 73, 219, 27, 71, 206, 85, 45, 116, 24, 184, 13, 178, 203, 160, 129, 253, 243, 99, 61, 86, 3, 68, 122, 231, 236, 35, 217, 247, 220, 28, 245, 171, 29, 107, 60, 223, 250, 195, 150, 238, 76, 108, 71, 41, 252, 63, 30, 149, 34, 16, 106, 161, 186, 140, 79, 82, 10, 119, 35, 205, 180, 72, 160, 161, 115, 230, 48, 54, 104, 133, 96, 89, 251, 196, 81, 194, 224, 250, 208, 151, 190, 167, 144, 73, 81, 65, 162, 119, 112, 64, 84, 12, 235, 176, 140, 144, 29, 30, 111, 2, 85, 139, 6, 98, 112, 163, 134, 243, 125, 28, 94, 43, 196, 61, 153, 147, 221, 170, 232, 86, 234, 76, 121, 125, 214, 168, 124, 36, 146, 9, 158, 100, 77, 233, 141, 192, 84, 51, 238, 220, 187, 136, 152, 54, 88, 92, 33, 156, 69, 17, 225, 90, 12, 205, 72, 44, 225, 58, 109, 207, 57, 37, 151, 43, 237, 197, 125, 57, 206, 124, 102, 221, 63, 84, 62, 47, 230, 165, 108, 22, 44, 40, 184, 120, 123, 244, 97, 130, 5, 150, 178, 62, 238, 108, 142, 236, 204, 144, 51, 224, 165, 129, 49, 104, 14, 39, 239, 241, 171, 231, 147, 53, 205, 131, 147, 53, 96, 122, 185, 45, 165, 197, 145, 8, 212, 244, 13, 141, 85, 14, 0, 1, 0, 129, 180, 102, 110, 67, 113, 8, 212, 49, 24, 170, 153, 180, 159, 253, 29, 12, 10, 229, 5, 130, 201, 142, 168, 229, 121, 220, 215, 145, 87, 102, 175, 252, 27, 127, 67, 198, 234, 207, 127, 60, 180, 165, 39, 127, 54, 77, 223, 0, 0, 0, 0, 0, 0, 0, 5, 129, 208, 199, 124, 253, 93, 74, 44, 173, 97, 175, 78, 41, 124, 55, 88, 233, 177, 36, 231, 149, 23, 95, 106, 56, 223, 67, 89, 180, 163, 253, 183, 42, 20, 37, 180, 243, 178, 76, 80, 109, 62, 193, 176, 31, 136, 233, 198, 184, 160, 145, 2, 215, 60, 184, 89, 93, 214, 69, 27, 55, 158, 161, 12, 68, 138, 241, 98, 64, 187, 185, 241, 125, 189, 200, 44, 198, 24, 181, 2, 128, 78, 207, 174, 98, 123, 27, 152, 220, 169, 202, 249, 246, 229, 136, 119, 164, 44, 235, 119, 174, 197, 184, 242, 59, 35, 225, 150, 73, 114, 169, 27, 122, 122, 43, 163, 162, 111, 152, 139, 90, 141, 150, 134, 227, 34, 190, 66, 66, 99, 165, 215, 99, 63, 207, 11, 214, 192, 140, 1, 177, 237, 86, 197, 145, 165, 222, 21, 253, 217, 97, 90, 222, 165, 5, 206, 88, 38, 234, 133, 108, 212, 22, 217, 217, 215, 203, 255, 169, 112, 123, 41, 118, 125, 61, 130, 133, 70, 208, 215, 13, 198, 85, 72, 228, 247, 235, 193, 55, 22, 26, 6, 165, 194, 68, 206, 199, 74, 199, 83, 45, 250, 225, 165, 93, 111, 114, 177, 113, 131, 205, 172, 94, 251, 109, 173, 176, 91, 95, 169, 25, 8, 134, 205, 34, 218, 182, 175, 44, 82, 155, 120, 201, 79, 23, 38, 20, 251, 69, 102, 253, 10, 64, 210, 23, 41, 168, 220, 22, 33, 114, 179, 145, 160, 22, 1, 6, 99, 168, 210, 24, 224, 162, 97, 158, 60, 16, 120, 227, 80, 23, 29, 0, 0, 0, 5, 0, 0, 0, 1, 86, 246, 38, 201, 121, 123, 162, 157, 79, 37, 208, 227, 251, 19, 191, 18, 63, 175, 160, 253, 221, 25, 4, 224, 15, 139, 251, 205, 88, 162, 29, 136, 39, 21, 147, 210, 236, 21, 164, 165, 242, 33, 229, 203, 50, 58, 255, 231, 77, 59, 47, 176, 121, 217, 56, 62, 81, 228, 210, 138, 57, 116, 144, 156, 37, 248, 157, 41, 231, 212, 106, 11, 231, 213, 61, 6, 65, 158, 202, 162, 90, 125, 90, 7, 9, 204, 64, 66, 83, 11, 122, 120, 111, 207, 5, 159, 0, 0, 0, 2, 38, 75, 232, 162, 164, 43, 201, 37, 69, 242, 179, 9, 114, 69, 195, 45, 115, 249, 175, 21, 139, 32, 67, 20, 154, 209, 29, 204, 209, 138, 62, 40, 102, 160, 127, 249, 145, 214, 43, 78, 16, 149, 228, 163, 136, 134, 224, 57, 146, 5, 21, 100, 82, 37, 164, 204, 126, 209, 169, 93, 196, 65, 200, 69, 43, 75, 160, 198, 221, 210, 43, 24, 189, 165, 248, 249, 93, 231, 104, 179, 99, 192, 107, 224, 33, 187, 210, 179, 134, 108, 25, 3, 59, 7, 84, 74, 0, 0, 0, 3, 38, 79, 195, 233, 43, 139, 79, 179, 5, 226, 174, 79, 212, 137, 24, 92, 11, 45, 182, 241, 127, 238, 43, 131, 34, 164, 214, 22, 188, 107, 189, 197, 100, 99, 84, 171, 32, 44, 202, 105, 248, 224, 72, 129, 143, 193, 167, 204, 161, 24, 196, 199, 129, 228, 135, 23, 167, 74, 151, 34, 185, 128, 141, 58, 57, 106, 235, 165, 179, 162, 2, 199, 11, 128, 6, 159, 73, 233, 10, 191, 216, 194, 115, 249, 7, 237, 21, 45, 238, 243, 202, 148, 209, 82, 192, 186, 0, 0, 0, 4, 30, 123, 235, 128, 206, 115, 247, 203, 81, 175, 44, 127, 136, 52, 58, 144, 52, 204, 211, 201, 1, 104, 100, 165, 78, 83, 206, 98, 188, 178, 40, 252, 107, 1, 48, 105, 12, 194, 246, 70, 75, 111, 21, 189, 70, 202, 26, 20, 167, 113, 249, 41, 93, 193, 89, 241, 117, 30, 252, 133, 75, 17, 45, 56, 112, 70, 130, 161, 230, 152, 51, 222, 125, 29, 205, 137, 117, 48, 185, 84, 37, 198, 74, 4, 125, 169, 194, 238, 200, 243, 120, 55, 30, 137, 172, 28, 0, 0, 0, 5, 18, 224, 174, 159, 236, 107, 201, 10, 130, 244, 1, 216, 115, 209, 102, 211, 122, 246, 199, 3, 111, 160, 228, 183, 187, 22, 91, 251, 81, 121, 58, 29, 49, 178, 186, 5, 58, 79, 16, 51, 206, 47, 186, 72, 181, 251, 150, 39, 191, 188, 84, 182, 184, 14, 74, 18, 245, 218, 214, 181, 201, 166, 155, 226, 28, 102, 219, 121, 234, 103, 43, 39, 231, 105, 65, 127, 5, 128, 152, 30, 183, 66, 112, 88, 138, 244, 209, 104, 203, 85, 211, 94, 192, 124, 173, 92, 99, 113, 235, 90, 233, 235, 207, 46, 109, 195, 82, 142, 44, 35, 238, 96, 248, 69, 124, 240, 167, 173, 55, 172, 138, 7, 56, 167, 2, 65, 84, 168, 0, 0, 0, 8, 7, 87, 242, 245, 15, 188, 36, 105, 61, 97, 35, 132, 13, 183, 129, 107, 6, 22, 37, 181, 219, 84, 60, 242, 223, 160, 237, 151, 214, 164, 88, 15, 8, 0, 49, 72, 114, 37, 197, 164, 198, 248, 19, 124, 110, 210, 43, 98, 227, 199, 20, 114, 8, 51, 93, 68, 232, 150, 10, 115, 30, 233, 217, 40, 30, 54, 221, 64, 150, 15, 245, 110, 29, 159, 28, 107, 90, 17, 59, 42, 215, 39, 58, 19, 212, 54, 160, 201, 7, 114, 49, 96, 211, 221, 88, 56, 34, 202, 0, 79, 90, 165, 186, 237, 120, 31, 96, 253, 81, 122, 82, 71, 106, 161, 65, 129, 121, 205, 239, 139, 230, 233, 0, 139, 57, 96, 8, 100, 49, 158, 23, 38, 223, 148, 248, 113, 174, 226, 80, 62, 88, 181, 80, 117, 72, 87, 225, 3, 193, 30, 97, 8, 142, 40, 50, 7, 29, 119, 170, 232, 109, 145, 11, 172, 0, 67, 12, 135, 212, 159, 184, 251, 193, 119, 44, 56, 10, 204, 249, 67, 237, 124, 232, 2, 123, 112, 130, 188, 28, 10, 185, 103, 1, 116, 74, 55, 222, 50, 74, 206, 50, 208, 18, 238, 173, 149, 147, 138, 130, 160, 165, 225, 49, 0, 160, 46, 61, 48, 24, 183, 220, 48, 234, 155, 94, 249, 165, 51, 151, 234, 167, 80, 151, 201, 68, 150, 223, 249, 204, 127, 74, 51, 6, 188, 178, 16, 154, 221, 100, 48, 143, 143, 13, 206, 120, 99, 114, 153, 149, 215, 85, 241, 105, 130, 22, 140, 253, 141, 165, 107, 109, 131, 114, 169, 44, 27, 102, 220, 94, 71, 63, 32, 242, 204, 167, 151, 203, 0, 33, 117, 95, 184, 77, 21, 77, 144, 109, 208, 36, 144, 154, 242, 125, 246, 30, 186, 113, 149, 103, 144, 219, 166, 62, 5, 213, 61, 61, 218, 24, 204, 22, 74, 132, 126, 110, 167, 200, 93, 91, 176, 152, 169, 112, 15, 187, 228, 74, 20, 192, 173, 55, 64, 216, 103, 107, 223, 95, 101, 139, 168, 51, 254, 37, 129, 210, 130, 101, 169, 134, 153, 164, 47, 204, 100, 240, 175, 37, 148, 216, 222, 53, 47, 22, 156, 222, 247, 249, 103, 110, 222, 62, 41, 206, 179, 39, 51, 41, 243, 20, 20, 50, 160, 248, 47, 194, 27, 153, 98, 136, 107, 223, 3, 188, 215, 192, 142, 223, 145, 111, 119, 41, 200, 63, 141, 193, 175, 109, 188, 139, 170, 25, 153, 151, 126, 101, 70, 40, 2, 198, 224, 121, 121, 124, 143, 138, 133, 110, 211, 24, 193, 64, 233, 209, 88, 173, 200, 167, 175, 3, 186, 179, 2, 127, 76, 95, 56, 69, 154, 216, 190, 225, 202, 37, 74, 5, 184, 224, 252, 63, 51, 98, 208, 163, 114, 48, 217, 129, 238, 29, 191, 80, 81, 119, 195, 110, 76, 236, 44, 40, 242, 92, 238, 95, 88, 185, 149, 170, 74, 233, 129, 78, 198, 219, 216, 238, 175, 255, 172, 233, 183, 132, 234, 108, 55, 196, 85, 111, 152, 202, 132, 220, 135, 162, 170, 2, 198, 134, 214, 36, 169, 104, 151, 164, 129, 70, 238, 132, 234, 112, 83, 65, 70, 133, 200, 62, 45, 5, 77, 129, 146, 149, 235, 47, 167, 222, 174, 187, 204, 227, 107, 213, 208, 191, 97, 106, 36, 2, 113, 57, 189, 83, 90, 135, 253, 109, 5, 84, 31, 167, 36, 28, 47, 171, 169, 21, 185, 239, 236, 111, 142, 24, 225, 174, 172, 150, 197, 31, 41, 253, 244, 114, 151, 168, 221, 162, 102, 36, 1, 95, 167, 187, 206, 114, 93, 115, 198, 251, 252, 217, 146, 39, 4, 89, 228, 42, 78, 140, 16, 236, 249, 140, 28, 184, 233, 43, 73, 88, 141, 176, 238, 60, 103, 47, 4, 25, 185, 107, 144, 188, 226, 128, 5, 232, 206, 97, 239, 18, 219, 70, 234, 40, 191, 120, 224, 105, 226, 144, 96, 9, 184, 54, 252, 3, 0, 95, 244, 185, 23, 125, 12, 161, 121, 69, 67, 156, 156, 186, 181, 200, 146, 91, 29, 238, 63, 204, 63, 56, 191, 83, 25, 114, 194, 124, 161, 46, 47, 159, 99, 209, 14, 32, 45, 211, 212, 19, 62, 132, 31, 244, 209, 143, 133, 105, 157, 9, 59, 229, 107, 66, 4, 148, 161, 105, 144, 160, 5, 19, 11, 1, 111, 140, 1, 236, 225, 116, 213, 81, 62, 103, 168, 67, 56, 140, 96, 162, 84, 215, 32, 201, 137, 250, 252, 58, 202, 34, 50, 89, 183, 143, 50, 21, 159, 38, 83, 146, 54, 199, 183, 244, 27, 199, 186, 192, 183, 5, 198, 69, 163, 22, 175, 26, 53, 84, 46, 96, 177, 14, 102, 138, 3, 136, 30, 15, 2, 22, 119, 56, 195, 107, 186, 221, 127, 43, 158, 204, 230, 188, 238, 168, 28, 47, 102, 200, 116, 23, 224, 1, 3, 125, 134, 162, 13, 213, 146, 32, 30, 42, 94, 132, 50, 212, 126, 164, 89, 245, 2, 87, 37, 160, 158, 47, 125, 19, 165, 135, 108, 184, 252, 131, 198, 207, 214, 123, 20, 58, 48, 82, 4, 168, 48, 200, 41, 219, 187, 87, 161, 77, 209, 108, 202, 223, 189, 41, 49, 118, 94, 119, 183, 94, 33, 5, 13, 122, 18, 203, 126, 60, 24, 226, 147, 235, 78, 184, 235, 111, 52, 122, 83, 50, 49, 231, 247, 121, 246, 53, 192, 139, 171, 166, 151, 30, 216, 155, 53, 199, 100, 243, 196, 194, 204, 121, 28, 201, 252, 101, 21, 169, 208, 251, 79, 50, 214, 28, 232, 229, 83, 164, 210, 156, 36, 18, 85, 21, 136, 90, 110, 163, 132, 70, 242, 96, 17, 218, 129, 161, 87, 184, 152, 169, 20, 84, 43, 209, 49, 2, 220, 50, 254, 240, 4, 93, 136, 223, 204, 191, 247, 184, 97, 75, 53, 201, 94, 109, 182, 30, 150, 211, 122, 34, 246, 133, 214, 245, 165, 129, 115, 239, 28, 157, 112, 252, 224, 136, 61, 200, 70, 9, 131, 93, 87, 172, 128, 21, 186, 139, 220, 198, 43, 36, 254, 140, 102, 9, 122, 12, 250, 221, 74, 203, 144, 51, 77, 3, 214, 184, 228, 114, 135, 103, 13, 193, 191, 242, 69, 99, 223, 96, 174, 161, 207, 98, 208, 93, 173, 61, 160, 114, 209, 155, 107, 21, 210, 246, 13, 95, 103, 134, 82, 168, 113, 161, 94, 92, 124, 241, 66, 79, 224, 20, 13, 59, 71, 114, 132, 155, 9, 154, 54, 196, 97, 53, 253, 241, 188, 84, 224, 120, 113, 220, 254, 60, 189, 132, 236, 94, 129, 94, 202, 169, 220, 105, 132, 66, 80, 109, 43, 255, 167, 254, 41, 181, 222, 32, 157, 139, 222, 187, 145, 238, 3, 108, 69, 180, 75, 235, 122, 189, 102, 148, 177, 91, 95, 29, 170, 79, 217, 0, 0, 0, 4, 137, 61, 32, 191, 246, 145, 115, 139, 192, 93, 95, 100, 236, 68, 11, 161, 181, 35, 10, 116, 92, 213, 161, 171, 165, 234, 92, 130, 95, 182, 195, 32, 124, 247, 201, 3, 27, 46, 9, 115, 247, 29, 239, 12, 139, 214, 182, 222, 179, 29, 37, 223, 44, 17, 201, 141, 73, 113, 198, 29, 116, 173, 157, 119, 91, 120, 69, 155, 245, 63, 144, 202, 92, 240, 34, 215, 155, 34, 154, 113, 147, 161, 216, 85, 59, 171, 54, 149, 57, 191, 223, 212, 137, 121, 119, 140, 134, 191, 45, 61, 250, 22, 10, 236, 171, 157, 44, 37, 184, 35, 74, 145, 66, 57, 62, 219, 194, 43, 19, 239, 243, 16, 20, 103, 31, 34, 211, 52, 130, 237, 105, 179, 5, 236, 179, 252, 170, 196, 39, 133, 196, 254, 91, 196, 150, 217, 32, 209, 197, 109, 124, 55, 251, 112, 104, 116, 193, 66, 190, 2, 248, 132, 149, 91, 222, 223, 29, 85, 248, 16, 173, 163, 117, 214, 209, 89, 236, 20, 212, 175, 188, 32, 164, 209, 2, 246, 148, 251, 13, 248, 153, 58, 137, 84, 181, 121, 77, 106, 150, 116, 250, 172, 60, 52, 210, 156, 137, 61, 143, 177, 253, 232, 247, 237, 252, 2, 58, 119, 102, 141, 196, 141, 60, 114, 23, 210, 220, 193, 179, 242, 38, 9, 102, 135, 82, 249, 190, 191, 151, 13, 136, 9, 72, 255, 211, 88, 49, 250, 159, 103, 69, 204, 92, 193, 129, 251, 147, 172, 241, 16, 208, 84, 83, 253, 93, 207, 157, 113, 192, 82, 191, 143, 242, 191, 155, 237, 151, 138, 74, 254, 80, 188, 53, 222, 151, 175, 184, 60, 184, 19, 210, 92, 6, 121, 79, 124, 116, 80, 194, 150, 223, 36, 152, 93, 218, 30, 122, 116, 235, 142, 51, 87, 187, 37, 130, 68, 75, 84, 169, 134, 207, 235, 222, 135, 43, 71, 221, 131, 222, 246, 242, 28, 115, 99, 101, 183, 166, 24, 78, 195, 4, 12, 170, 129, 132, 238, 61, 205, 5, 180, 203, 117, 214, 188, 12, 21, 150, 71, 165, 155, 210, 106, 58, 193, 147, 181, 113, 189, 146, 97, 200, 36, 28, 165, 213, 41, 234, 180, 90, 189, 114, 90, 142, 157, 93, 234, 8, 164, 181, 4, 184, 208, 174, 90, 57, 143, 39, 5, 85, 226, 76, 1, 51, 80, 247, 116, 103, 178, 24, 111, 60, 119, 91, 19, 150, 161, 67, 79, 110, 196, 207, 81, 250, 92, 110, 232, 104, 140, 110, 76, 115, 236, 103, 241, 190, 156, 116, 45, 60, 106, 177, 201, 22, 21, 145, 145, 215, 65, 1, 165, 114, 122, 95, 33, 122, 10, 186, 166, 187, 167, 246, 3, 116, 120, 5, 26, 73, 213, 1, 30, 4, 94, 176, 216, 111, 206, 57, 62, 12, 123, 74, 150, 56, 44, 96, 224, 154, 72, 158, 187, 109, 128, 13, 192, 216, 141, 5, 5])
        let actual = t.serialize()

        print([UInt8](actual))

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testCanCreateBakerKeys() throws {
        let account = try AccountAddress(base58Check: "35CJPZohio6Ztii2zy1AYzJKvuxbGG44wrBn7hLHiYLoF2nxnh")
        let bakerKeys = BakerKeyPairs.generate()
        let _ = try BakerKeysPayload.create(account: account, bakerKeys: bakerKeys)
    }

    func testConfigureBakerSerialization() throws {
        let signatureVerifyKey = Data([247, 193, 33, 152, 127, 222, 9, 217, 38, 58, 30, 84, 214, 143, 194, 7, 99, 168, 111, 194, 57, 149, 108, 94, 213, 206, 244, 99, 39, 250, 108, 93])
        let electionVerifyKey = Data([178, 57, 219, 237, 5, 241, 101, 120, 212, 13, 95, 125, 88, 119, 48, 215, 9, 86, 181, 4, 19, 87, 54, 192, 17, 84, 235, 124, 93, 101, 169, 78])
        let aggregationVerifyKey = Data([143, 45, 244, 130, 96, 225, 106, 28, 201, 134, 86, 84, 95, 62, 163, 1, 26, 240, 3, 61, 241, 213, 198, 87, 176, 234, 21, 240, 32, 248, 213, 239, 34, 193, 121, 239, 93, 202, 57, 75, 27, 180, 52, 230, 190, 19, 38, 18, 22, 249, 92, 162, 5, 83, 200, 245, 148, 43, 159, 232, 209, 72, 23, 178, 211, 210, 39, 158, 205, 134, 232, 140, 127, 223, 78, 70, 133, 4, 76, 203, 48, 115, 131, 246, 253, 203, 206, 115, 225, 38, 81, 105, 166, 67, 220, 71])
        let proofSig = Data([11, 46, 77, 245, 199, 21, 221, 29, 36, 155, 150, 134, 175, 125, 228, 250, 50, 134, 139, 206, 247, 34, 22, 118, 31, 234, 52, 119, 189, 114, 32, 3, 125, 136, 124, 125, 155, 6, 157, 158, 197, 165, 70, 242, 183, 234, 149, 120, 232, 2, 141, 155, 172, 142, 221, 133, 62, 71, 34, 70, 19, 144, 175, 14])
        let proofElection = Data([82, 121, 251, 107, 209, 88, 161, 195, 131, 16, 188, 8, 13, 5, 79, 234, 127, 109, 72, 174, 205, 208, 165, 199, 138, 42, 59, 40, 122, 145, 221, 14, 218, 49, 39, 170, 5, 6, 239, 142, 193, 106, 33, 233, 44, 230, 218, 187, 63, 42, 72, 190, 147, 18, 240, 29, 29, 45, 105, 182, 146, 170, 146, 5])
        let proofAggregation = Data([132, 244, 27, 33, 127, 164, 95, 185, 214, 199, 185, 237, 77, 222, 159, 109, 227, 127, 52, 32, 197, 90, 185, 46, 25, 239, 228, 177, 220, 107, 236, 186, 9, 91, 230, 208, 101, 197, 217, 133, 68, 88, 65, 31, 116, 97, 191, 177, 108, 162, 188, 56, 165, 120, 133, 230, 138, 98, 129, 199, 205, 149, 163, 194])

        let capital = CCD(microCCD: 1_234_567)
        let restakeEarnings = true
        let openForDelegation = OpenStatus.closedForAll
        let metadataUrl = "https://url.com/test"
        let keysWithProofs = BakerKeysPayload(signatureVerifyKey: signatureVerifyKey, electionVerifyKey: electionVerifyKey, aggregationVerifyKey: aggregationVerifyKey, proofSig: proofSig, proofElection: proofElection, proofAggregation: proofAggregation)
        let tfCommission = AmountFraction(partsPerHundredThousand: 4321)
        let brCommission = AmountFraction(partsPerHundredThousand: 6545)
        let frCommission = AmountFraction(partsPerHundredThousand: 18989)

        var data = ConfigureBakerPayload()
        var t = AccountTransactionPayload.configureBaker(data)

        var expected = Data([25, 0, 0])
        var actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        data = ConfigureBakerPayload(capital: capital)
        t = AccountTransactionPayload.configureBaker(data)

        expected = Data([25, 0, 1, 0, 0, 0, 0, 0, 18, 214, 135])
        actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        data = ConfigureBakerPayload(restakeEarnings: restakeEarnings)
        t = AccountTransactionPayload.configureBaker(data)

        expected = Data([25, 0, 2, 1])
        actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        data = ConfigureBakerPayload(metadataUrl: metadataUrl)
        t = AccountTransactionPayload.configureBaker(data)

        expected = Data([25, 0, 16, 0, 20, 104, 116, 116, 112, 115, 58, 47, 47, 117, 114, 108, 46, 99, 111, 109, 47, 116, 101, 115, 116])
        actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        data = ConfigureBakerPayload(capital: capital, restakeEarnings: restakeEarnings, openForDelegation: openForDelegation, keysWithProofs: keysWithProofs, metadataUrl: metadataUrl, transactionFeeCommission: tfCommission, bakingRewardCommission: brCommission, finalizationRewardCommission: frCommission)
        t = AccountTransactionPayload.configureBaker(data)

        expected = Data([25, 0, 255, 0, 0, 0, 0, 0, 18, 214, 135, 1, 2, 178, 57, 219, 237, 5, 241, 101, 120, 212, 13, 95, 125, 88, 119, 48, 215, 9, 86, 181, 4, 19, 87, 54, 192, 17, 84, 235, 124, 93, 101, 169, 78, 82, 121, 251, 107, 209, 88, 161, 195, 131, 16, 188, 8, 13, 5, 79, 234, 127, 109, 72, 174, 205, 208, 165, 199, 138, 42, 59, 40, 122, 145, 221, 14, 218, 49, 39, 170, 5, 6, 239, 142, 193, 106, 33, 233, 44, 230, 218, 187, 63, 42, 72, 190, 147, 18, 240, 29, 29, 45, 105, 182, 146, 170, 146, 5, 247, 193, 33, 152, 127, 222, 9, 217, 38, 58, 30, 84, 214, 143, 194, 7, 99, 168, 111, 194, 57, 149, 108, 94, 213, 206, 244, 99, 39, 250, 108, 93, 11, 46, 77, 245, 199, 21, 221, 29, 36, 155, 150, 134, 175, 125, 228, 250, 50, 134, 139, 206, 247, 34, 22, 118, 31, 234, 52, 119, 189, 114, 32, 3, 125, 136, 124, 125, 155, 6, 157, 158, 197, 165, 70, 242, 183, 234, 149, 120, 232, 2, 141, 155, 172, 142, 221, 133, 62, 71, 34, 70, 19, 144, 175, 14, 143, 45, 244, 130, 96, 225, 106, 28, 201, 134, 86, 84, 95, 62, 163, 1, 26, 240, 3, 61, 241, 213, 198, 87, 176, 234, 21, 240, 32, 248, 213, 239, 34, 193, 121, 239, 93, 202, 57, 75, 27, 180, 52, 230, 190, 19, 38, 18, 22, 249, 92, 162, 5, 83, 200, 245, 148, 43, 159, 232, 209, 72, 23, 178, 211, 210, 39, 158, 205, 134, 232, 140, 127, 223, 78, 70, 133, 4, 76, 203, 48, 115, 131, 246, 253, 203, 206, 115, 225, 38, 81, 105, 166, 67, 220, 71, 132, 244, 27, 33, 127, 164, 95, 185, 214, 199, 185, 237, 77, 222, 159, 109, 227, 127, 52, 32, 197, 90, 185, 46, 25, 239, 228, 177, 220, 107, 236, 186, 9, 91, 230, 208, 101, 197, 217, 133, 68, 88, 65, 31, 116, 97, 191, 177, 108, 162, 188, 56, 165, 120, 133, 230, 138, 98, 129, 199, 205, 149, 163, 194, 0, 20, 104, 116, 116, 112, 115, 58, 47, 47, 117, 114, 108, 46, 99, 111, 109, 47, 116, 101, 115, 116, 0, 0, 16, 225, 0, 0, 25, 145, 0, 0, 74, 45])
        actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }

    func testConfigureDelegationSerialization() throws {
        var data = ConfigureDelegationPayload(capital: CCD(microCCD: 12_000_000), delegationTarget: DelegationTarget.passive)
        var t = AccountTransactionPayload.configureDelegation(data)

        var expected = Data([26, 0, 5, 0, 0, 0, 0, 0, 183, 27, 0, 0])
        var actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        data = ConfigureDelegationPayload(delegationTarget: DelegationTarget.baker(1234))
        t = AccountTransactionPayload.configureDelegation(data)

        expected = Data([26, 0, 4, 1, 0, 0, 0, 0, 0, 0, 4, 210])
        actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        data = ConfigureDelegationPayload(capital: CCD(microCCD: 432), restakeEarnings: true, delegationTarget: DelegationTarget.baker(12))
        t = AccountTransactionPayload.configureDelegation(data)

        expected = Data([26, 0, 7, 0, 0, 0, 0, 0, 0, 1, 176, 1, 1, 0, 0, 0, 0, 0, 0, 0, 12])
        actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)

        data = ConfigureDelegationPayload()
        t = AccountTransactionPayload.configureDelegation(data)

        expected = Data([26, 0, 0])
        actual = t.serialize()

        XCTAssertEqual(actual, expected)
        XCTAssertEqual(AccountTransactionPayload.deserialize(expected), t)
    }
}
