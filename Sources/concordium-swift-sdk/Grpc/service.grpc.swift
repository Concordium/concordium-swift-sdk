//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Concordium_V2_QueriesClient`, then call methods of this protocol to make API calls.
internal protocol Concordium_V2_QueriesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol? { get }

  func getBlocks(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_ArrivedBlockInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_Empty, Concordium_V2_ArrivedBlockInfo>

  func getFinalizedBlocks(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_FinalizedBlockInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_Empty, Concordium_V2_FinalizedBlockInfo>

  func getAccountInfo(
    _ request: Concordium_V2_AccountInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_AccountInfoRequest, Concordium_V2_AccountInfo>

  func getAccountList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_AccountAddress) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_AccountAddress>

  func getModuleList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_ModuleRef) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ModuleRef>

  func getAncestors(
    _ request: Concordium_V2_AncestorsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_BlockHash) -> Void
  ) -> ServerStreamingCall<Concordium_V2_AncestorsRequest, Concordium_V2_BlockHash>

  func getModuleSource(
    _ request: Concordium_V2_ModuleSourceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_ModuleSourceRequest, Concordium_V2_VersionedModuleSource>

  func getInstanceList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_ContractAddress) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ContractAddress>

  func getInstanceInfo(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceInfo>

  func getInstanceState(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_InstanceStateKVPair) -> Void
  ) -> ServerStreamingCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceStateKVPair>

  func instanceStateLookup(
    _ request: Concordium_V2_InstanceStateLookupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_InstanceStateLookupRequest, Concordium_V2_InstanceStateValueAtKey>

  func getNextAccountSequenceNumber(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_AccountAddress, Concordium_V2_NextAccountSequenceNumber>

  func getConsensusInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_ConsensusInfo>

  func getBlockItemStatus(
    _ request: Concordium_V2_TransactionHash,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_TransactionHash, Concordium_V2_BlockItemStatus>

  func getCryptographicParameters(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_CryptographicParameters>

  func getBlockInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockInfo>

  func getBakerList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_BakerId) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerId>

  func getPoolInfo(
    _ request: Concordium_V2_PoolInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_PoolInfoRequest, Concordium_V2_PoolInfoResponse>

  func getPassiveDelegationInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_PassiveDelegationInfo>

  func getBlocksAtHeight(
    _ request: Concordium_V2_BlocksAtHeightRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlocksAtHeightRequest, Concordium_V2_BlocksAtHeightResponse>

  func getTokenomicsInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_TokenomicsInfo>

  func invokeInstance(
    _ request: Concordium_V2_InvokeInstanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_InvokeInstanceRequest, Concordium_V2_InvokeInstanceResponse>

  func getPoolDelegators(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_DelegatorInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorInfo>

  func getPoolDelegatorsRewardPeriod(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_DelegatorRewardPeriodInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorRewardPeriodInfo>

  func getPassiveDelegators(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_DelegatorInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorInfo>

  func getPassiveDelegatorsRewardPeriod(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_DelegatorRewardPeriodInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorRewardPeriodInfo>

  func getBranches(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_Branch>

  func getElectionInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ElectionInfo>

  func getIdentityProviders(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_IpInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_IpInfo>

  func getAnonymityRevokers(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_ArInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ArInfo>

  func getAccountNonFinalizedTransactions(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_TransactionHash) -> Void
  ) -> ServerStreamingCall<Concordium_V2_AccountAddress, Concordium_V2_TransactionHash>

  func getBlockTransactionEvents(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_BlockItemSummary) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItemSummary>

  func getBlockSpecialEvents(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_BlockSpecialEvent) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockSpecialEvent>

  func getBlockPendingUpdates(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_PendingUpdate) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_PendingUpdate>

  func getNextUpdateSequenceNumbers(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_NextUpdateSequenceNumbers>

  func getBakerEarliestWinTime(
    _ request: Concordium_V2_BakerId,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BakerId, Concordium_V2_Timestamp>

  func shutdown(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_Empty>

  func peerConnect(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty>

  func peerDisconnect(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty>

  func getBannedPeers(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_BannedPeers>

  func banPeer(
    _ request: Concordium_V2_PeerToBan,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_PeerToBan, Concordium_V2_Empty>

  func unbanPeer(
    _ request: Concordium_V2_BannedPeer,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BannedPeer, Concordium_V2_Empty>

  func dumpStart(
    _ request: Concordium_V2_DumpRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_DumpRequest, Concordium_V2_Empty>

  func dumpStop(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_Empty>

  func getPeersInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_PeersInfo>

  func getNodeInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_NodeInfo>

  func sendBlockItem(
    _ request: Concordium_V2_SendBlockItemRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_SendBlockItemRequest, Concordium_V2_TransactionHash>

  func getAccountTransactionSignHash(
    _ request: Concordium_V2_PreAccountTransaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_PreAccountTransaction, Concordium_V2_AccountTransactionSignHash>

  func getBlockChainParameters(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ChainParameters>

  func getBlockFinalizationSummary(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockFinalizationSummary>

  func getBlockItems(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_BlockItem) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItem>

  func getBakersRewardPeriod(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_BakerRewardPeriodInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerRewardPeriodInfo>

  func getBlockCertificates(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockCertificates>

  func getWinningBakersEpoch(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_WinningBaker) -> Void
  ) -> ServerStreamingCall<Concordium_V2_EpochRequest, Concordium_V2_WinningBaker>

  func getFirstBlockEpoch(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Concordium_V2_EpochRequest, Concordium_V2_BlockHash>

  func dryRun(
    callOptions: CallOptions?,
    handler: @escaping (Concordium_V2_DryRunResponse) -> Void
  ) -> BidirectionalStreamingCall<Concordium_V2_DryRunRequest, Concordium_V2_DryRunResponse>
}

extension Concordium_V2_QueriesClientProtocol {
  internal var serviceName: String {
    return "concordium.v2.Queries"
  }

  /// Return a stream of blocks that arrive from the time the query is made onward.
  /// This can be used to listen for incoming blocks.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlocks.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getBlocks(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_ArrivedBlockInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_Empty, Concordium_V2_ArrivedBlockInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlocksInterceptors() ?? [],
      handler: handler
    )
  }

  /// Return a stream of blocks that are finalized from the time the query is
  /// made onward. This can be used to listen for newly finalized blocks. Note
  /// that there is no guarantee that blocks will not be skipped if the client is
  /// too slow in processing the stream, however blocks will always be sent by
  /// increasing block height.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFinalizedBlocks.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getFinalizedBlocks(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_FinalizedBlockInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_Empty, Concordium_V2_FinalizedBlockInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getFinalizedBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFinalizedBlocksInterceptors() ?? [],
      handler: handler
    )
  }

  /// Retrieve the information about the given account in the given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountInfo(
    _ request: Concordium_V2_AccountInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_AccountInfoRequest, Concordium_V2_AccountInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInfoInterceptors() ?? []
    )
  }

  /// Retrieve the list of accounts that exist at the end of the given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountList.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getAccountList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_AccountAddress) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_AccountAddress> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountListInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get a list of all smart contract modules. The stream will end
  /// when all modules that exist in the state at the end of the given
  /// block have been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModuleList.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getModuleList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_ModuleRef) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ModuleRef> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getModuleList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleListInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get a stream of ancestors for the provided block.
  /// Starting with the provided block itself, moving backwards until no more
  /// ancestors or the requested number of ancestors has been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAncestors.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getAncestors(
    _ request: Concordium_V2_AncestorsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_BlockHash) -> Void
  ) -> ServerStreamingCall<Concordium_V2_AncestorsRequest, Concordium_V2_BlockHash> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAncestors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAncestorsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the source of a smart contract module.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetModuleSource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getModuleSource(
    _ request: Concordium_V2_ModuleSourceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_ModuleSourceRequest, Concordium_V2_VersionedModuleSource> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getModuleSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleSourceInterceptors() ?? []
    )
  }

  /// Get a list of addresses for all smart contract instances. The stream
  /// will end when all instances that exist in the state at the end of the
  /// given block has been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstanceList.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getInstanceList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_ContractAddress) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ContractAddress> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceListInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get info about a smart contract instance as it appears at the end of the
  /// given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstanceInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getInstanceInfo(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceInfoInterceptors() ?? []
    )
  }

  /// Get the exact state of a specific contract instance, streamed as a list of
  /// key-value pairs. The list is streamed in lexicographic order of keys.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInstanceState.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getInstanceState(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_InstanceStateKVPair) -> Void
  ) -> ServerStreamingCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceStateKVPair> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceStateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the value at a specific key of a contract state. In contrast to
  /// `GetInstanceState` this is more efficient, but requires the user to know
  /// the specific key to look for.
  ///
  /// - Parameters:
  ///   - request: Request to send to InstanceStateLookup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func instanceStateLookup(
    _ request: Concordium_V2_InstanceStateLookupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_InstanceStateLookupRequest, Concordium_V2_InstanceStateValueAtKey> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.instanceStateLookup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstanceStateLookupInterceptors() ?? []
    )
  }

  /// Get the best guess as to what the next account sequence number should be.
  /// If all account transactions are finalized then this information is reliable.
  /// Otherwise this is the best guess, assuming all other transactions will be
  /// committed to blocks and eventually finalized.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNextAccountSequenceNumber.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNextAccountSequenceNumber(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_AccountAddress, Concordium_V2_NextAccountSequenceNumber> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNextAccountSequenceNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNextAccountSequenceNumberInterceptors() ?? []
    )
  }

  /// Get information about the current state of consensus.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConsensusInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConsensusInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_ConsensusInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getConsensusInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConsensusInfoInterceptors() ?? []
    )
  }

  /// Get the status of and information about a specific block item (transaction).
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockItemStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockItemStatus(
    _ request: Concordium_V2_TransactionHash,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_TransactionHash, Concordium_V2_BlockItemStatus> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockItemStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockItemStatusInterceptors() ?? []
    )
  }

  /// Get the cryptographic parameters in a given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCryptographicParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCryptographicParameters(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_CryptographicParameters> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getCryptographicParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCryptographicParametersInterceptors() ?? []
    )
  }

  /// Get information, such as height, timings, and transaction counts for the given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockInfoInterceptors() ?? []
    )
  }

  /// Get all the bakers at the end of the given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBakerList.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getBakerList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_BakerId) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerId> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakerList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakerListInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get information about a given pool at the end of a given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPoolInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPoolInfo(
    _ request: Concordium_V2_PoolInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_PoolInfoRequest, Concordium_V2_PoolInfoResponse> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolInfoInterceptors() ?? []
    )
  }

  /// Get information about the passive delegators at the end of a given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPassiveDelegationInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPassiveDelegationInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_PassiveDelegationInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegationInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegationInfoInterceptors() ?? []
    )
  }

  /// Get a list of live blocks at a given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlocksAtHeight.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlocksAtHeight(
    _ request: Concordium_V2_BlocksAtHeightRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlocksAtHeightRequest, Concordium_V2_BlocksAtHeightResponse> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlocksAtHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlocksAtHeightInterceptors() ?? []
    )
  }

  /// Get information about tokenomics at the end of a given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTokenomicsInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTokenomicsInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_TokenomicsInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getTokenomicsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenomicsInfoInterceptors() ?? []
    )
  }

  /// Run the smart contract entrypoint in a given context and in the state at
  /// the end of the given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to InvokeInstance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func invokeInstance(
    _ request: Concordium_V2_InvokeInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_InvokeInstanceRequest, Concordium_V2_InvokeInstanceResponse> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.invokeInstance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvokeInstanceInterceptors() ?? []
    )
  }

  /// Get the registered delegators of a given pool at the end of a given block.
  /// In contrast to the `GetPoolDelegatorsRewardPeriod` which returns delegators
  /// that are fixed for the reward period of the block, this endpoint returns the
  /// list of delegators that are registered in the block. Any changes to delegators
  /// are immediately visible in this list.
  /// The stream will end when all the delegators has been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPoolDelegators.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getPoolDelegators(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_DelegatorInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolDelegatorsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the fixed delegators of a given pool for the reward period of the given block.
  /// In contracts to the `GetPoolDelegators` which returns delegators registered
  /// for the given block, this endpoint returns the fixed delegators contributing
  /// stake in the reward period containing the given block.
  /// The stream will end when all the delegators has been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPoolDelegatorsRewardPeriod.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getPoolDelegatorsRewardPeriod(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_DelegatorRewardPeriodInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorRewardPeriodInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegatorsRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolDelegatorsRewardPeriodInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the registered passive delegators at the end of a given block.
  /// In contrast to the `GetPassiveDelegatorsRewardPeriod` which returns delegators
  /// that are fixed for the reward period of the block, this endpoint returns the
  /// list of delegators that are registered in the block. Any changes to delegators
  /// are immediately visible in this list.
  /// The stream will end when all the delegators has been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPassiveDelegators.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getPassiveDelegators(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_DelegatorInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegatorsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the fixed passive delegators for the reward period of the given block.
  /// In contracts to the `GetPassiveDelegators` which returns delegators registered
  /// for the given block, this endpoint returns the fixed delegators contributing
  /// stake in the reward period containing the given block.
  /// The stream will end when all the delegators has been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPassiveDelegatorsRewardPeriod.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getPassiveDelegatorsRewardPeriod(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_DelegatorRewardPeriodInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorRewardPeriodInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegatorsRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegatorsRewardPeriodInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the current branches of blocks starting from and including the last finalized block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBranches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBranches(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_Branch> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBranches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBranchesInterceptors() ?? []
    )
  }

  /// Get information related to the baker election for a particular block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetElectionInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getElectionInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ElectionInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getElectionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetElectionInfoInterceptors() ?? []
    )
  }

  /// Get the identity providers registered as of the end of a given block.
  /// The stream will end when all the identity providers have been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIdentityProviders.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getIdentityProviders(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_IpInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_IpInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getIdentityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdentityProvidersInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the anonymity revokers registered as of the end of a given block.
  /// The stream will end when all the anonymity revokers have been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAnonymityRevokers.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getAnonymityRevokers(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_ArInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ArInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAnonymityRevokers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAnonymityRevokersInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get a list of non-finalized transaction hashes for a given account. This
  /// endpoint is not expected to return a large amount of data in most cases,
  /// but in bad network condtions it might. The stream will end when all the
  /// non-finalized transaction hashes have been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountNonFinalizedTransactions.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getAccountNonFinalizedTransactions(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_TransactionHash) -> Void
  ) -> ServerStreamingCall<Concordium_V2_AccountAddress, Concordium_V2_TransactionHash> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountNonFinalizedTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountNonFinalizedTransactionsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get a list of transaction events in a given block.
  /// The stream will end when all the transaction events for a given block have been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockTransactionEvents.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getBlockTransactionEvents(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_BlockItemSummary) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItemSummary> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockTransactionEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockTransactionEventsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get a list of special events in a given block. These are events generated
  /// by the protocol, such as minting and reward payouts. They are not directly
  /// generated by any transaction. The stream will end when all the special
  /// events for a given block have been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockSpecialEvents.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getBlockSpecialEvents(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_BlockSpecialEvent) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockSpecialEvent> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockSpecialEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockSpecialEventsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the pending updates to chain parameters at the end of a given block.
  /// The stream will end when all the pending updates for a given block have been returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockPendingUpdates.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getBlockPendingUpdates(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_PendingUpdate) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_PendingUpdate> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockPendingUpdates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockPendingUpdatesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get next available sequence numbers for updating chain parameters after a given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNextUpdateSequenceNumbers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNextUpdateSequenceNumbers(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_NextUpdateSequenceNumbers> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNextUpdateSequenceNumbers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNextUpdateSequenceNumbersInterceptors() ?? []
    )
  }

  /// Get the projected earliest time at which a particular baker will be required to bake a block.
  /// If the current consensus version is 0, this returns the status 'Unavailable', as the endpoint
  /// is only supported by consensus version 1.
  ///
  /// If the baker is not a baker for the current reward period, this returns a timestamp at the
  /// start of the next reward period. If the baker is a baker for the current reward period, the
  /// earliest win time is projected from the current round forward, assuming that each round after
  /// the last finalized round will take the minimum block time. (If blocks take longer, or timeouts
  /// occur, the actual time may be later, and the reported time in subsequent queries may reflect
  /// this.) At the end of an epoch (or if the baker is not projected to bake before the end of the
  /// epoch) the earliest win time for a (current) baker will be projected as the start of the next
  /// epoch. This is because the seed for the leader election is updated at the epoch boundary, and
  /// so the winners cannot be predicted beyond that. Note that in some circumstances the returned
  /// timestamp can be in the past, especially at the end of an epoch.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBakerEarliestWinTime.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBakerEarliestWinTime(
    _ request: Concordium_V2_BakerId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BakerId, Concordium_V2_Timestamp> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakerEarliestWinTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakerEarliestWinTimeInterceptors() ?? []
    )
  }

  /// Shut down the node.
  /// Return a GRPC error if the shutdown failed.
  ///
  /// - Parameters:
  ///   - request: Request to send to Shutdown.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shutdown(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_Empty> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  /// Suggest to a peer to connect to the submitted peer details.
  /// This, if successful, adds the peer to the list of given addresses.
  /// Otherwise return a GRPC error.
  /// Note. The peer might not be connected to instantly, in that case
  /// the node will try to establish the connection in near future. This
  /// function returns a GRPC status 'Ok' in this case.
  ///
  /// - Parameters:
  ///   - request: Request to send to PeerConnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func peerConnect(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.peerConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeerConnectInterceptors() ?? []
    )
  }

  /// Disconnect from the peer and remove them from the given addresses list
  /// if they are on it. Return if the request was processed successfully.
  /// Otherwise return a GRPC error.
  ///
  /// - Parameters:
  ///   - request: Request to send to PeerDisconnect.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func peerDisconnect(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.peerDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeerDisconnectInterceptors() ?? []
    )
  }

  /// Get a list of banned peers.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBannedPeers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBannedPeers(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_BannedPeers> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBannedPeers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBannedPeersInterceptors() ?? []
    )
  }

  /// Ban the given peer.
  /// Returns a GRPC error if the action failed.
  ///
  /// - Parameters:
  ///   - request: Request to send to BanPeer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func banPeer(
    _ request: Concordium_V2_PeerToBan,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_PeerToBan, Concordium_V2_Empty> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.banPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanPeerInterceptors() ?? []
    )
  }

  /// Unban the banned peer.
  /// Returns a GRPC error if the action failed.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnbanPeer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unbanPeer(
    _ request: Concordium_V2_BannedPeer,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BannedPeer, Concordium_V2_Empty> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.unbanPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbanPeerInterceptors() ?? []
    )
  }

  /// Start dumping packages into the specified file.
  /// Only enabled if the node was built with the `network_dump` feature.
  /// Returns a GRPC error if the network dump failed to start.
  ///
  /// - Parameters:
  ///   - request: Request to send to DumpStart.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dumpStart(
    _ request: Concordium_V2_DumpRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_DumpRequest, Concordium_V2_Empty> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dumpStart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDumpStartInterceptors() ?? []
    )
  }

  /// Stop dumping packages.
  /// Only enabled if the node was built with the `network_dump` feature.
  /// Returns a GRPC error if the network dump failed to be stopped.
  ///
  /// - Parameters:
  ///   - request: Request to send to DumpStop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dumpStop(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_Empty> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dumpStop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDumpStopInterceptors() ?? []
    )
  }

  //// Get a list of the peers that the node is connected to
  //// and assoicated network related information for each peer.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPeersInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPeersInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_PeersInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPeersInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPeersInfoInterceptors() ?? []
    )
  }

  /// Get information about the node.
  /// The `NodeInfo` includes information of
  /// * Meta information such as the, version of the node, type of the node, uptime and the local time of the node.
  /// * NetworkInfo which yields data such as the node id, packets sent/received,
  ///   average bytes per second sent/received.
  /// * ConsensusInfo. The `ConsensusInfo` returned depends on if the node supports
  ///   the protocol on chain and whether the node is configured as a baker or not.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNodeInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getNodeInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_Empty, Concordium_V2_NodeInfo> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNodeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNodeInfoInterceptors() ?? []
    )
  }

  /// Send a block item. A block item is either an `AccountTransaction`, which is
  /// a transaction signed and paid for by an account, a `CredentialDeployment`,
  /// which creates a new account, or `UpdateInstruction`, which is an
  /// instruction to change some parameters of the chain. Update instructions can
  /// only be sent by the governance committee.
  ///
  /// Returns a hash of the block item, which can be used with
  /// `GetBlockItemStatus`.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendBlockItem.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendBlockItem(
    _ request: Concordium_V2_SendBlockItemRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_SendBlockItemRequest, Concordium_V2_TransactionHash> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.sendBlockItem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendBlockItemInterceptors() ?? []
    )
  }

  /// Get the hash to be signed for an account transaction. The hash returned
  /// should be signed and the signatures included as an
  /// AccountTransactionSignature when calling `SendBlockItem`. This is provided as
  /// a convenience to support cases where the right SDK is not available for
  /// interacting with the node. If an SDK is available then it is strongly
  /// recommended to compute this hash off-line using it. That reduces the trust
  /// in the node, removes networking failure modes, and will perform better.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAccountTransactionSignHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountTransactionSignHash(
    _ request: Concordium_V2_PreAccountTransaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_PreAccountTransaction, Concordium_V2_AccountTransactionSignHash> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountTransactionSignHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountTransactionSignHashInterceptors() ?? []
    )
  }

  /// Get the values of chain parameters in effect in the given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockChainParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockChainParameters(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ChainParameters> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockChainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockChainParametersInterceptors() ?? []
    )
  }

  /// Get the summary of the finalization data in a given block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockFinalizationSummary.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockFinalizationSummary(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockFinalizationSummary> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockFinalizationSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockFinalizationSummaryInterceptors() ?? []
    )
  }

  /// Get the items of a block.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockItems.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getBlockItems(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_BlockItem) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItem> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockItems.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockItemsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get all bakers in the reward period of a block.
  /// This endpoint is only supported for protocol version 6 and onwards.
  /// If the protocol does not support the endpoint then an  'IllegalArgument' error is returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBakersRewardPeriod.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getBakersRewardPeriod(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_BakerRewardPeriodInfo) -> Void
  ) -> ServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerRewardPeriodInfo> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakersRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakersRewardPeriodInterceptors() ?? [],
      handler: handler
    )
  }

  /// For a non-genesis block, this returns the quorum certificate, a timeout
  /// certificate (if present) and epoch finalization entry (if present).
  /// Note that, if the block being pointed to is not a product of ConcordiumBFT,
  /// then the response will be a grpc error (invalid argument).
  /// If the endpoint is not enabled by the node, then an 'unimplemented' error
  /// will be returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockCertificates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockCertificates(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockCertificates> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockCertificates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockCertificatesInterceptors() ?? []
    )
  }

  /// Get the list of bakers that won the lottery in a particular historical epoch (i.e. the
  /// last finalized block is in a later epoch). This lists the winners for each round in the
  /// epoch, starting from the round after the last block in the previous epoch, running to
  /// the round before the first block in the next epoch. It also indicates if a block in each
  /// round was included in the finalized chain.
  ///
  /// The following error cases are possible:
  ///  * `NOT_FOUND` if the query specifies an unknown block.
  ///  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis
  ////    index, or is for a future genesis index.
  ///  * `INVALID_ARGUMENT` if the query is for an epoch that is not finalized for a past genesis
  ///    index.
  ///  * `INVALID_ARGUMENT` if the query is for a genesis index at consensus version 0.
  ///  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.
  ///  * `UNIMPLEMENTED` if the endpoint is disabled on the node.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetWinningBakersEpoch.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getWinningBakersEpoch(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_WinningBaker) -> Void
  ) -> ServerStreamingCall<Concordium_V2_EpochRequest, Concordium_V2_WinningBaker> {
    return self.makeServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getWinningBakersEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWinningBakersEpochInterceptors() ?? [],
      handler: handler
    )
  }

  /// Get the block hash of the first finalized block in a specified epoch.
  ///
  /// The following error cases are possible:
  ///  * `NOT_FOUND` if the query specifies an unknown block.
  ///  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis
  ///    index, or is for a future genesis index.
  ///  * `INVALID_ARGUMENT` if the query is for an epoch with no finalized blocks for a past genesis
  ///    index.
  ///  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.
  ///  * `UNIMPLEMENTED` if the endpoint is disabled on the node.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFirstBlockEpoch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFirstBlockEpoch(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Concordium_V2_EpochRequest, Concordium_V2_BlockHash> {
    return self.makeUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getFirstBlockEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFirstBlockEpochInterceptors() ?? []
    )
  }

  /// Dry run a series of transactions and operations on a state derived from a specified block.
  /// The server should send a single `DryRunResponse` for each `DryRunRequest` received, unless
  /// the call fails with an error status code. If a request produces a `DryRunErrorResponse`, then
  /// the server will still process subsequent requests, just as if the request causing the error
  /// did not happen.
  ///
  /// The first request should be `load_block_at_state` to determine the block state that will be
  /// used for the dry run.
  ///
  /// The server associates each request with an energy cost, and limits the total energy that may
  /// be expended in a single invocation of `DryRun`. This limit is reported as `quota` in the
  /// initial metadata returned by the server. If executing an operation exceeds the limit,
  /// the server terminates the session with `RESOURCE_EXHAUSTED`.
  ///
  /// The server also imposes a timeout for a dry-run session to complete. The server reports
  /// the timeout duration in milliseconds in the initial metadata field `timeout`. If the session
  /// is not completed before the timeout elapses, the server terminates the session with
  /// `DEADLINE_EXCEEDED`.
  ///
  /// The following error cases are possible:
  ///  * `INVALID_ARGUMENT` if any `DryRunRequest` is malformed.
  ///  * `RESOURCE_EXHAUSTED` if the energy quota is exceeded.
  ///  * `DEADLINE_EXCEEDED` if the session does not complete before the server-imposed timeout.
  ///  * `RESOURCE_EXHAUSTED` if the server is not currently accepting new `DryRun` sessions.
  ///    (The server may impose a limit on the number of concurrent sessions.)
  ///  * `INTERNAL` if an interal server error occurs. This should not happen, and likely indicates
  ///    a bug.
  ///  * `UNIMPLEMENTED` if the endpoint is disabled on the node.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func dryRun(
    callOptions: CallOptions? = nil,
    handler: @escaping (Concordium_V2_DryRunResponse) -> Void
  ) -> BidirectionalStreamingCall<Concordium_V2_DryRunRequest, Concordium_V2_DryRunResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dryRun.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDryRunInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Concordium_V2_QueriesClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Concordium_V2_QueriesNIOClient")
internal final class Concordium_V2_QueriesClient: Concordium_V2_QueriesClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the concordium.v2.Queries service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Concordium_V2_QueriesNIOClient: Concordium_V2_QueriesClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol?

  /// Creates a client for the concordium.v2.Queries service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Concordium_V2_QueriesAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol? { get }

  func makeGetBlocksCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_Empty, Concordium_V2_ArrivedBlockInfo>

  func makeGetFinalizedBlocksCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_Empty, Concordium_V2_FinalizedBlockInfo>

  func makeGetAccountInfoCall(
    _ request: Concordium_V2_AccountInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_AccountInfoRequest, Concordium_V2_AccountInfo>

  func makeGetAccountListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_AccountAddress>

  func makeGetModuleListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ModuleRef>

  func makeGetAncestorsCall(
    _ request: Concordium_V2_AncestorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_AncestorsRequest, Concordium_V2_BlockHash>

  func makeGetModuleSourceCall(
    _ request: Concordium_V2_ModuleSourceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_ModuleSourceRequest, Concordium_V2_VersionedModuleSource>

  func makeGetInstanceListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ContractAddress>

  func makeGetInstanceInfoCall(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceInfo>

  func makeGetInstanceStateCall(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceStateKVPair>

  func makeInstanceStateLookupCall(
    _ request: Concordium_V2_InstanceStateLookupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_InstanceStateLookupRequest, Concordium_V2_InstanceStateValueAtKey>

  func makeGetNextAccountSequenceNumberCall(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_AccountAddress, Concordium_V2_NextAccountSequenceNumber>

  func makeGetConsensusInfoCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_ConsensusInfo>

  func makeGetBlockItemStatusCall(
    _ request: Concordium_V2_TransactionHash,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_TransactionHash, Concordium_V2_BlockItemStatus>

  func makeGetCryptographicParametersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_CryptographicParameters>

  func makeGetBlockInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockInfo>

  func makeGetBakerListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerId>

  func makeGetPoolInfoCall(
    _ request: Concordium_V2_PoolInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_PoolInfoRequest, Concordium_V2_PoolInfoResponse>

  func makeGetPassiveDelegationInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_PassiveDelegationInfo>

  func makeGetBlocksAtHeightCall(
    _ request: Concordium_V2_BlocksAtHeightRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlocksAtHeightRequest, Concordium_V2_BlocksAtHeightResponse>

  func makeGetTokenomicsInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_TokenomicsInfo>

  func makeInvokeInstanceCall(
    _ request: Concordium_V2_InvokeInstanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_InvokeInstanceRequest, Concordium_V2_InvokeInstanceResponse>

  func makeGetPoolDelegatorsCall(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorInfo>

  func makeGetPoolDelegatorsRewardPeriodCall(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorRewardPeriodInfo>

  func makeGetPassiveDelegatorsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorInfo>

  func makeGetPassiveDelegatorsRewardPeriodCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorRewardPeriodInfo>

  func makeGetBranchesCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_Branch>

  func makeGetElectionInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ElectionInfo>

  func makeGetIdentityProvidersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_IpInfo>

  func makeGetAnonymityRevokersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ArInfo>

  func makeGetAccountNonFinalizedTransactionsCall(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_AccountAddress, Concordium_V2_TransactionHash>

  func makeGetBlockTransactionEventsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItemSummary>

  func makeGetBlockSpecialEventsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockSpecialEvent>

  func makeGetBlockPendingUpdatesCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_PendingUpdate>

  func makeGetNextUpdateSequenceNumbersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_NextUpdateSequenceNumbers>

  func makeGetBakerEarliestWinTimeCall(
    _ request: Concordium_V2_BakerId,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BakerId, Concordium_V2_Timestamp>

  func makeShutdownCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_Empty>

  func makePeerConnectCall(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty>

  func makePeerDisconnectCall(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty>

  func makeGetBannedPeersCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_BannedPeers>

  func makeBanPeerCall(
    _ request: Concordium_V2_PeerToBan,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_PeerToBan, Concordium_V2_Empty>

  func makeUnbanPeerCall(
    _ request: Concordium_V2_BannedPeer,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BannedPeer, Concordium_V2_Empty>

  func makeDumpStartCall(
    _ request: Concordium_V2_DumpRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_DumpRequest, Concordium_V2_Empty>

  func makeDumpStopCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_Empty>

  func makeGetPeersInfoCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_PeersInfo>

  func makeGetNodeInfoCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_NodeInfo>

  func makeSendBlockItemCall(
    _ request: Concordium_V2_SendBlockItemRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_SendBlockItemRequest, Concordium_V2_TransactionHash>

  func makeGetAccountTransactionSignHashCall(
    _ request: Concordium_V2_PreAccountTransaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_PreAccountTransaction, Concordium_V2_AccountTransactionSignHash>

  func makeGetBlockChainParametersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ChainParameters>

  func makeGetBlockFinalizationSummaryCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockFinalizationSummary>

  func makeGetBlockItemsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItem>

  func makeGetBakersRewardPeriodCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerRewardPeriodInfo>

  func makeGetBlockCertificatesCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockCertificates>

  func makeGetWinningBakersEpochCall(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_EpochRequest, Concordium_V2_WinningBaker>

  func makeGetFirstBlockEpochCall(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Concordium_V2_EpochRequest, Concordium_V2_BlockHash>

  func makeDryRunCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Concordium_V2_DryRunRequest, Concordium_V2_DryRunResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Concordium_V2_QueriesAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Concordium_V2_QueriesClientMetadata.serviceDescriptor
  }

  internal var interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetBlocksCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_Empty, Concordium_V2_ArrivedBlockInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlocksInterceptors() ?? []
    )
  }

  internal func makeGetFinalizedBlocksCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_Empty, Concordium_V2_FinalizedBlockInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getFinalizedBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFinalizedBlocksInterceptors() ?? []
    )
  }

  internal func makeGetAccountInfoCall(
    _ request: Concordium_V2_AccountInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_AccountInfoRequest, Concordium_V2_AccountInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInfoInterceptors() ?? []
    )
  }

  internal func makeGetAccountListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_AccountAddress> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountListInterceptors() ?? []
    )
  }

  internal func makeGetModuleListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ModuleRef> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getModuleList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleListInterceptors() ?? []
    )
  }

  internal func makeGetAncestorsCall(
    _ request: Concordium_V2_AncestorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_AncestorsRequest, Concordium_V2_BlockHash> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAncestors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAncestorsInterceptors() ?? []
    )
  }

  internal func makeGetModuleSourceCall(
    _ request: Concordium_V2_ModuleSourceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_ModuleSourceRequest, Concordium_V2_VersionedModuleSource> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getModuleSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleSourceInterceptors() ?? []
    )
  }

  internal func makeGetInstanceListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ContractAddress> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceListInterceptors() ?? []
    )
  }

  internal func makeGetInstanceInfoCall(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceInfoInterceptors() ?? []
    )
  }

  internal func makeGetInstanceStateCall(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceStateKVPair> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceStateInterceptors() ?? []
    )
  }

  internal func makeInstanceStateLookupCall(
    _ request: Concordium_V2_InstanceStateLookupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_InstanceStateLookupRequest, Concordium_V2_InstanceStateValueAtKey> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.instanceStateLookup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstanceStateLookupInterceptors() ?? []
    )
  }

  internal func makeGetNextAccountSequenceNumberCall(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_AccountAddress, Concordium_V2_NextAccountSequenceNumber> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNextAccountSequenceNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNextAccountSequenceNumberInterceptors() ?? []
    )
  }

  internal func makeGetConsensusInfoCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_ConsensusInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getConsensusInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConsensusInfoInterceptors() ?? []
    )
  }

  internal func makeGetBlockItemStatusCall(
    _ request: Concordium_V2_TransactionHash,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_TransactionHash, Concordium_V2_BlockItemStatus> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockItemStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockItemStatusInterceptors() ?? []
    )
  }

  internal func makeGetCryptographicParametersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_CryptographicParameters> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getCryptographicParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCryptographicParametersInterceptors() ?? []
    )
  }

  internal func makeGetBlockInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockInfoInterceptors() ?? []
    )
  }

  internal func makeGetBakerListCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerId> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakerList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakerListInterceptors() ?? []
    )
  }

  internal func makeGetPoolInfoCall(
    _ request: Concordium_V2_PoolInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_PoolInfoRequest, Concordium_V2_PoolInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolInfoInterceptors() ?? []
    )
  }

  internal func makeGetPassiveDelegationInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_PassiveDelegationInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegationInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegationInfoInterceptors() ?? []
    )
  }

  internal func makeGetBlocksAtHeightCall(
    _ request: Concordium_V2_BlocksAtHeightRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlocksAtHeightRequest, Concordium_V2_BlocksAtHeightResponse> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlocksAtHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlocksAtHeightInterceptors() ?? []
    )
  }

  internal func makeGetTokenomicsInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_TokenomicsInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getTokenomicsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenomicsInfoInterceptors() ?? []
    )
  }

  internal func makeInvokeInstanceCall(
    _ request: Concordium_V2_InvokeInstanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_InvokeInstanceRequest, Concordium_V2_InvokeInstanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.invokeInstance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvokeInstanceInterceptors() ?? []
    )
  }

  internal func makeGetPoolDelegatorsCall(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolDelegatorsInterceptors() ?? []
    )
  }

  internal func makeGetPoolDelegatorsRewardPeriodCall(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorRewardPeriodInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegatorsRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolDelegatorsRewardPeriodInterceptors() ?? []
    )
  }

  internal func makeGetPassiveDelegatorsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegatorsInterceptors() ?? []
    )
  }

  internal func makeGetPassiveDelegatorsRewardPeriodCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorRewardPeriodInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegatorsRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegatorsRewardPeriodInterceptors() ?? []
    )
  }

  internal func makeGetBranchesCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_Branch> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBranches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBranchesInterceptors() ?? []
    )
  }

  internal func makeGetElectionInfoCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ElectionInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getElectionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetElectionInfoInterceptors() ?? []
    )
  }

  internal func makeGetIdentityProvidersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_IpInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getIdentityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdentityProvidersInterceptors() ?? []
    )
  }

  internal func makeGetAnonymityRevokersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_ArInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAnonymityRevokers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAnonymityRevokersInterceptors() ?? []
    )
  }

  internal func makeGetAccountNonFinalizedTransactionsCall(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_AccountAddress, Concordium_V2_TransactionHash> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountNonFinalizedTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountNonFinalizedTransactionsInterceptors() ?? []
    )
  }

  internal func makeGetBlockTransactionEventsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItemSummary> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockTransactionEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockTransactionEventsInterceptors() ?? []
    )
  }

  internal func makeGetBlockSpecialEventsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockSpecialEvent> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockSpecialEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockSpecialEventsInterceptors() ?? []
    )
  }

  internal func makeGetBlockPendingUpdatesCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_PendingUpdate> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockPendingUpdates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockPendingUpdatesInterceptors() ?? []
    )
  }

  internal func makeGetNextUpdateSequenceNumbersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_NextUpdateSequenceNumbers> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNextUpdateSequenceNumbers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNextUpdateSequenceNumbersInterceptors() ?? []
    )
  }

  internal func makeGetBakerEarliestWinTimeCall(
    _ request: Concordium_V2_BakerId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BakerId, Concordium_V2_Timestamp> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakerEarliestWinTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakerEarliestWinTimeInterceptors() ?? []
    )
  }

  internal func makeShutdownCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_Empty> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  internal func makePeerConnectCall(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.peerConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeerConnectInterceptors() ?? []
    )
  }

  internal func makePeerDisconnectCall(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_IpSocketAddress, Concordium_V2_Empty> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.peerDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeerDisconnectInterceptors() ?? []
    )
  }

  internal func makeGetBannedPeersCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_BannedPeers> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBannedPeers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBannedPeersInterceptors() ?? []
    )
  }

  internal func makeBanPeerCall(
    _ request: Concordium_V2_PeerToBan,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_PeerToBan, Concordium_V2_Empty> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.banPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanPeerInterceptors() ?? []
    )
  }

  internal func makeUnbanPeerCall(
    _ request: Concordium_V2_BannedPeer,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BannedPeer, Concordium_V2_Empty> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.unbanPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbanPeerInterceptors() ?? []
    )
  }

  internal func makeDumpStartCall(
    _ request: Concordium_V2_DumpRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_DumpRequest, Concordium_V2_Empty> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dumpStart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDumpStartInterceptors() ?? []
    )
  }

  internal func makeDumpStopCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_Empty> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dumpStop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDumpStopInterceptors() ?? []
    )
  }

  internal func makeGetPeersInfoCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_PeersInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPeersInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPeersInfoInterceptors() ?? []
    )
  }

  internal func makeGetNodeInfoCall(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_Empty, Concordium_V2_NodeInfo> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNodeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNodeInfoInterceptors() ?? []
    )
  }

  internal func makeSendBlockItemCall(
    _ request: Concordium_V2_SendBlockItemRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_SendBlockItemRequest, Concordium_V2_TransactionHash> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.sendBlockItem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendBlockItemInterceptors() ?? []
    )
  }

  internal func makeGetAccountTransactionSignHashCall(
    _ request: Concordium_V2_PreAccountTransaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_PreAccountTransaction, Concordium_V2_AccountTransactionSignHash> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountTransactionSignHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountTransactionSignHashInterceptors() ?? []
    )
  }

  internal func makeGetBlockChainParametersCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_ChainParameters> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockChainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockChainParametersInterceptors() ?? []
    )
  }

  internal func makeGetBlockFinalizationSummaryCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockFinalizationSummary> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockFinalizationSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockFinalizationSummaryInterceptors() ?? []
    )
  }

  internal func makeGetBlockItemsCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockItem> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockItems.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockItemsInterceptors() ?? []
    )
  }

  internal func makeGetBakersRewardPeriodCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_BlockHashInput, Concordium_V2_BakerRewardPeriodInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakersRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakersRewardPeriodInterceptors() ?? []
    )
  }

  internal func makeGetBlockCertificatesCall(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_BlockHashInput, Concordium_V2_BlockCertificates> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockCertificates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockCertificatesInterceptors() ?? []
    )
  }

  internal func makeGetWinningBakersEpochCall(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Concordium_V2_EpochRequest, Concordium_V2_WinningBaker> {
    return self.makeAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getWinningBakersEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWinningBakersEpochInterceptors() ?? []
    )
  }

  internal func makeGetFirstBlockEpochCall(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Concordium_V2_EpochRequest, Concordium_V2_BlockHash> {
    return self.makeAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getFirstBlockEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFirstBlockEpochInterceptors() ?? []
    )
  }

  internal func makeDryRunCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Concordium_V2_DryRunRequest, Concordium_V2_DryRunResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dryRun.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDryRunInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Concordium_V2_QueriesAsyncClientProtocol {
  internal func getBlocks(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_ArrivedBlockInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlocksInterceptors() ?? []
    )
  }

  internal func getFinalizedBlocks(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_FinalizedBlockInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getFinalizedBlocks.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFinalizedBlocksInterceptors() ?? []
    )
  }

  internal func getAccountInfo(
    _ request: Concordium_V2_AccountInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_AccountInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountInfoInterceptors() ?? []
    )
  }

  internal func getAccountList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_AccountAddress> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountListInterceptors() ?? []
    )
  }

  internal func getModuleList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_ModuleRef> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getModuleList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleListInterceptors() ?? []
    )
  }

  internal func getAncestors(
    _ request: Concordium_V2_AncestorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_BlockHash> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAncestors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAncestorsInterceptors() ?? []
    )
  }

  internal func getModuleSource(
    _ request: Concordium_V2_ModuleSourceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_VersionedModuleSource {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getModuleSource.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetModuleSourceInterceptors() ?? []
    )
  }

  internal func getInstanceList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_ContractAddress> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceListInterceptors() ?? []
    )
  }

  internal func getInstanceInfo(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_InstanceInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceInfoInterceptors() ?? []
    )
  }

  internal func getInstanceState(
    _ request: Concordium_V2_InstanceInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_InstanceStateKVPair> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getInstanceState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInstanceStateInterceptors() ?? []
    )
  }

  internal func instanceStateLookup(
    _ request: Concordium_V2_InstanceStateLookupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_InstanceStateValueAtKey {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.instanceStateLookup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInstanceStateLookupInterceptors() ?? []
    )
  }

  internal func getNextAccountSequenceNumber(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_NextAccountSequenceNumber {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNextAccountSequenceNumber.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNextAccountSequenceNumberInterceptors() ?? []
    )
  }

  internal func getConsensusInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_ConsensusInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getConsensusInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConsensusInfoInterceptors() ?? []
    )
  }

  internal func getBlockItemStatus(
    _ request: Concordium_V2_TransactionHash,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_BlockItemStatus {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockItemStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockItemStatusInterceptors() ?? []
    )
  }

  internal func getCryptographicParameters(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_CryptographicParameters {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getCryptographicParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCryptographicParametersInterceptors() ?? []
    )
  }

  internal func getBlockInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_BlockInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockInfoInterceptors() ?? []
    )
  }

  internal func getBakerList(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_BakerId> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakerList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakerListInterceptors() ?? []
    )
  }

  internal func getPoolInfo(
    _ request: Concordium_V2_PoolInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_PoolInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolInfoInterceptors() ?? []
    )
  }

  internal func getPassiveDelegationInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_PassiveDelegationInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegationInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegationInfoInterceptors() ?? []
    )
  }

  internal func getBlocksAtHeight(
    _ request: Concordium_V2_BlocksAtHeightRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_BlocksAtHeightResponse {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlocksAtHeight.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlocksAtHeightInterceptors() ?? []
    )
  }

  internal func getTokenomicsInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_TokenomicsInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getTokenomicsInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenomicsInfoInterceptors() ?? []
    )
  }

  internal func invokeInstance(
    _ request: Concordium_V2_InvokeInstanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_InvokeInstanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.invokeInstance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvokeInstanceInterceptors() ?? []
    )
  }

  internal func getPoolDelegators(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_DelegatorInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolDelegatorsInterceptors() ?? []
    )
  }

  internal func getPoolDelegatorsRewardPeriod(
    _ request: Concordium_V2_GetPoolDelegatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_DelegatorRewardPeriodInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegatorsRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolDelegatorsRewardPeriodInterceptors() ?? []
    )
  }

  internal func getPassiveDelegators(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_DelegatorInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegatorsInterceptors() ?? []
    )
  }

  internal func getPassiveDelegatorsRewardPeriod(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_DelegatorRewardPeriodInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegatorsRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPassiveDelegatorsRewardPeriodInterceptors() ?? []
    )
  }

  internal func getBranches(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Branch {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBranches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBranchesInterceptors() ?? []
    )
  }

  internal func getElectionInfo(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_ElectionInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getElectionInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetElectionInfoInterceptors() ?? []
    )
  }

  internal func getIdentityProviders(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_IpInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getIdentityProviders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetIdentityProvidersInterceptors() ?? []
    )
  }

  internal func getAnonymityRevokers(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_ArInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAnonymityRevokers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAnonymityRevokersInterceptors() ?? []
    )
  }

  internal func getAccountNonFinalizedTransactions(
    _ request: Concordium_V2_AccountAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_TransactionHash> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountNonFinalizedTransactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountNonFinalizedTransactionsInterceptors() ?? []
    )
  }

  internal func getBlockTransactionEvents(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_BlockItemSummary> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockTransactionEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockTransactionEventsInterceptors() ?? []
    )
  }

  internal func getBlockSpecialEvents(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_BlockSpecialEvent> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockSpecialEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockSpecialEventsInterceptors() ?? []
    )
  }

  internal func getBlockPendingUpdates(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_PendingUpdate> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockPendingUpdates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockPendingUpdatesInterceptors() ?? []
    )
  }

  internal func getNextUpdateSequenceNumbers(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_NextUpdateSequenceNumbers {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNextUpdateSequenceNumbers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNextUpdateSequenceNumbersInterceptors() ?? []
    )
  }

  internal func getBakerEarliestWinTime(
    _ request: Concordium_V2_BakerId,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Timestamp {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakerEarliestWinTime.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakerEarliestWinTimeInterceptors() ?? []
    )
  }

  internal func shutdown(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Empty {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.shutdown.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownInterceptors() ?? []
    )
  }

  internal func peerConnect(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Empty {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.peerConnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeerConnectInterceptors() ?? []
    )
  }

  internal func peerDisconnect(
    _ request: Concordium_V2_IpSocketAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Empty {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.peerDisconnect.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeerDisconnectInterceptors() ?? []
    )
  }

  internal func getBannedPeers(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_BannedPeers {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBannedPeers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBannedPeersInterceptors() ?? []
    )
  }

  internal func banPeer(
    _ request: Concordium_V2_PeerToBan,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Empty {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.banPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanPeerInterceptors() ?? []
    )
  }

  internal func unbanPeer(
    _ request: Concordium_V2_BannedPeer,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Empty {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.unbanPeer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbanPeerInterceptors() ?? []
    )
  }

  internal func dumpStart(
    _ request: Concordium_V2_DumpRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Empty {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dumpStart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDumpStartInterceptors() ?? []
    )
  }

  internal func dumpStop(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_Empty {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dumpStop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDumpStopInterceptors() ?? []
    )
  }

  internal func getPeersInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_PeersInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getPeersInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPeersInfoInterceptors() ?? []
    )
  }

  internal func getNodeInfo(
    _ request: Concordium_V2_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_NodeInfo {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getNodeInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNodeInfoInterceptors() ?? []
    )
  }

  internal func sendBlockItem(
    _ request: Concordium_V2_SendBlockItemRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_TransactionHash {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.sendBlockItem.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendBlockItemInterceptors() ?? []
    )
  }

  internal func getAccountTransactionSignHash(
    _ request: Concordium_V2_PreAccountTransaction,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_AccountTransactionSignHash {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getAccountTransactionSignHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAccountTransactionSignHashInterceptors() ?? []
    )
  }

  internal func getBlockChainParameters(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_ChainParameters {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockChainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockChainParametersInterceptors() ?? []
    )
  }

  internal func getBlockFinalizationSummary(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_BlockFinalizationSummary {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockFinalizationSummary.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockFinalizationSummaryInterceptors() ?? []
    )
  }

  internal func getBlockItems(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_BlockItem> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockItems.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockItemsInterceptors() ?? []
    )
  }

  internal func getBakersRewardPeriod(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_BakerRewardPeriodInfo> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBakersRewardPeriod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBakersRewardPeriodInterceptors() ?? []
    )
  }

  internal func getBlockCertificates(
    _ request: Concordium_V2_BlockHashInput,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_BlockCertificates {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getBlockCertificates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockCertificatesInterceptors() ?? []
    )
  }

  internal func getWinningBakersEpoch(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_WinningBaker> {
    return self.performAsyncServerStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getWinningBakersEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetWinningBakersEpochInterceptors() ?? []
    )
  }

  internal func getFirstBlockEpoch(
    _ request: Concordium_V2_EpochRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Concordium_V2_BlockHash {
    return try await self.performAsyncUnaryCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.getFirstBlockEpoch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFirstBlockEpochInterceptors() ?? []
    )
  }

  internal func dryRun<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_DryRunResponse> where RequestStream: Sequence, RequestStream.Element == Concordium_V2_DryRunRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dryRun.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDryRunInterceptors() ?? []
    )
  }

  internal func dryRun<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Concordium_V2_DryRunResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Concordium_V2_DryRunRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Concordium_V2_QueriesClientMetadata.Methods.dryRun.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDryRunInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Concordium_V2_QueriesAsyncClient: Concordium_V2_QueriesAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Concordium_V2_QueriesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Concordium_V2_QueriesClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getBlocks'.
  func makeGetBlocksInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_ArrivedBlockInfo>]

  /// - Returns: Interceptors to use when invoking 'getFinalizedBlocks'.
  func makeGetFinalizedBlocksInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_FinalizedBlockInfo>]

  /// - Returns: Interceptors to use when invoking 'getAccountInfo'.
  func makeGetAccountInfoInterceptors() -> [ClientInterceptor<Concordium_V2_AccountInfoRequest, Concordium_V2_AccountInfo>]

  /// - Returns: Interceptors to use when invoking 'getAccountList'.
  func makeGetAccountListInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_AccountAddress>]

  /// - Returns: Interceptors to use when invoking 'getModuleList'.
  func makeGetModuleListInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_ModuleRef>]

  /// - Returns: Interceptors to use when invoking 'getAncestors'.
  func makeGetAncestorsInterceptors() -> [ClientInterceptor<Concordium_V2_AncestorsRequest, Concordium_V2_BlockHash>]

  /// - Returns: Interceptors to use when invoking 'getModuleSource'.
  func makeGetModuleSourceInterceptors() -> [ClientInterceptor<Concordium_V2_ModuleSourceRequest, Concordium_V2_VersionedModuleSource>]

  /// - Returns: Interceptors to use when invoking 'getInstanceList'.
  func makeGetInstanceListInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_ContractAddress>]

  /// - Returns: Interceptors to use when invoking 'getInstanceInfo'.
  func makeGetInstanceInfoInterceptors() -> [ClientInterceptor<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceInfo>]

  /// - Returns: Interceptors to use when invoking 'getInstanceState'.
  func makeGetInstanceStateInterceptors() -> [ClientInterceptor<Concordium_V2_InstanceInfoRequest, Concordium_V2_InstanceStateKVPair>]

  /// - Returns: Interceptors to use when invoking 'instanceStateLookup'.
  func makeInstanceStateLookupInterceptors() -> [ClientInterceptor<Concordium_V2_InstanceStateLookupRequest, Concordium_V2_InstanceStateValueAtKey>]

  /// - Returns: Interceptors to use when invoking 'getNextAccountSequenceNumber'.
  func makeGetNextAccountSequenceNumberInterceptors() -> [ClientInterceptor<Concordium_V2_AccountAddress, Concordium_V2_NextAccountSequenceNumber>]

  /// - Returns: Interceptors to use when invoking 'getConsensusInfo'.
  func makeGetConsensusInfoInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_ConsensusInfo>]

  /// - Returns: Interceptors to use when invoking 'getBlockItemStatus'.
  func makeGetBlockItemStatusInterceptors() -> [ClientInterceptor<Concordium_V2_TransactionHash, Concordium_V2_BlockItemStatus>]

  /// - Returns: Interceptors to use when invoking 'getCryptographicParameters'.
  func makeGetCryptographicParametersInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_CryptographicParameters>]

  /// - Returns: Interceptors to use when invoking 'getBlockInfo'.
  func makeGetBlockInfoInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BlockInfo>]

  /// - Returns: Interceptors to use when invoking 'getBakerList'.
  func makeGetBakerListInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BakerId>]

  /// - Returns: Interceptors to use when invoking 'getPoolInfo'.
  func makeGetPoolInfoInterceptors() -> [ClientInterceptor<Concordium_V2_PoolInfoRequest, Concordium_V2_PoolInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getPassiveDelegationInfo'.
  func makeGetPassiveDelegationInfoInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_PassiveDelegationInfo>]

  /// - Returns: Interceptors to use when invoking 'getBlocksAtHeight'.
  func makeGetBlocksAtHeightInterceptors() -> [ClientInterceptor<Concordium_V2_BlocksAtHeightRequest, Concordium_V2_BlocksAtHeightResponse>]

  /// - Returns: Interceptors to use when invoking 'getTokenomicsInfo'.
  func makeGetTokenomicsInfoInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_TokenomicsInfo>]

  /// - Returns: Interceptors to use when invoking 'invokeInstance'.
  func makeInvokeInstanceInterceptors() -> [ClientInterceptor<Concordium_V2_InvokeInstanceRequest, Concordium_V2_InvokeInstanceResponse>]

  /// - Returns: Interceptors to use when invoking 'getPoolDelegators'.
  func makeGetPoolDelegatorsInterceptors() -> [ClientInterceptor<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorInfo>]

  /// - Returns: Interceptors to use when invoking 'getPoolDelegatorsRewardPeriod'.
  func makeGetPoolDelegatorsRewardPeriodInterceptors() -> [ClientInterceptor<Concordium_V2_GetPoolDelegatorsRequest, Concordium_V2_DelegatorRewardPeriodInfo>]

  /// - Returns: Interceptors to use when invoking 'getPassiveDelegators'.
  func makeGetPassiveDelegatorsInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorInfo>]

  /// - Returns: Interceptors to use when invoking 'getPassiveDelegatorsRewardPeriod'.
  func makeGetPassiveDelegatorsRewardPeriodInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_DelegatorRewardPeriodInfo>]

  /// - Returns: Interceptors to use when invoking 'getBranches'.
  func makeGetBranchesInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_Branch>]

  /// - Returns: Interceptors to use when invoking 'getElectionInfo'.
  func makeGetElectionInfoInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_ElectionInfo>]

  /// - Returns: Interceptors to use when invoking 'getIdentityProviders'.
  func makeGetIdentityProvidersInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_IpInfo>]

  /// - Returns: Interceptors to use when invoking 'getAnonymityRevokers'.
  func makeGetAnonymityRevokersInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_ArInfo>]

  /// - Returns: Interceptors to use when invoking 'getAccountNonFinalizedTransactions'.
  func makeGetAccountNonFinalizedTransactionsInterceptors() -> [ClientInterceptor<Concordium_V2_AccountAddress, Concordium_V2_TransactionHash>]

  /// - Returns: Interceptors to use when invoking 'getBlockTransactionEvents'.
  func makeGetBlockTransactionEventsInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BlockItemSummary>]

  /// - Returns: Interceptors to use when invoking 'getBlockSpecialEvents'.
  func makeGetBlockSpecialEventsInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BlockSpecialEvent>]

  /// - Returns: Interceptors to use when invoking 'getBlockPendingUpdates'.
  func makeGetBlockPendingUpdatesInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_PendingUpdate>]

  /// - Returns: Interceptors to use when invoking 'getNextUpdateSequenceNumbers'.
  func makeGetNextUpdateSequenceNumbersInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_NextUpdateSequenceNumbers>]

  /// - Returns: Interceptors to use when invoking 'getBakerEarliestWinTime'.
  func makeGetBakerEarliestWinTimeInterceptors() -> [ClientInterceptor<Concordium_V2_BakerId, Concordium_V2_Timestamp>]

  /// - Returns: Interceptors to use when invoking 'shutdown'.
  func makeShutdownInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_Empty>]

  /// - Returns: Interceptors to use when invoking 'peerConnect'.
  func makePeerConnectInterceptors() -> [ClientInterceptor<Concordium_V2_IpSocketAddress, Concordium_V2_Empty>]

  /// - Returns: Interceptors to use when invoking 'peerDisconnect'.
  func makePeerDisconnectInterceptors() -> [ClientInterceptor<Concordium_V2_IpSocketAddress, Concordium_V2_Empty>]

  /// - Returns: Interceptors to use when invoking 'getBannedPeers'.
  func makeGetBannedPeersInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_BannedPeers>]

  /// - Returns: Interceptors to use when invoking 'banPeer'.
  func makeBanPeerInterceptors() -> [ClientInterceptor<Concordium_V2_PeerToBan, Concordium_V2_Empty>]

  /// - Returns: Interceptors to use when invoking 'unbanPeer'.
  func makeUnbanPeerInterceptors() -> [ClientInterceptor<Concordium_V2_BannedPeer, Concordium_V2_Empty>]

  /// - Returns: Interceptors to use when invoking 'dumpStart'.
  func makeDumpStartInterceptors() -> [ClientInterceptor<Concordium_V2_DumpRequest, Concordium_V2_Empty>]

  /// - Returns: Interceptors to use when invoking 'dumpStop'.
  func makeDumpStopInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_Empty>]

  /// - Returns: Interceptors to use when invoking 'getPeersInfo'.
  func makeGetPeersInfoInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_PeersInfo>]

  /// - Returns: Interceptors to use when invoking 'getNodeInfo'.
  func makeGetNodeInfoInterceptors() -> [ClientInterceptor<Concordium_V2_Empty, Concordium_V2_NodeInfo>]

  /// - Returns: Interceptors to use when invoking 'sendBlockItem'.
  func makeSendBlockItemInterceptors() -> [ClientInterceptor<Concordium_V2_SendBlockItemRequest, Concordium_V2_TransactionHash>]

  /// - Returns: Interceptors to use when invoking 'getAccountTransactionSignHash'.
  func makeGetAccountTransactionSignHashInterceptors() -> [ClientInterceptor<Concordium_V2_PreAccountTransaction, Concordium_V2_AccountTransactionSignHash>]

  /// - Returns: Interceptors to use when invoking 'getBlockChainParameters'.
  func makeGetBlockChainParametersInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_ChainParameters>]

  /// - Returns: Interceptors to use when invoking 'getBlockFinalizationSummary'.
  func makeGetBlockFinalizationSummaryInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BlockFinalizationSummary>]

  /// - Returns: Interceptors to use when invoking 'getBlockItems'.
  func makeGetBlockItemsInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BlockItem>]

  /// - Returns: Interceptors to use when invoking 'getBakersRewardPeriod'.
  func makeGetBakersRewardPeriodInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BakerRewardPeriodInfo>]

  /// - Returns: Interceptors to use when invoking 'getBlockCertificates'.
  func makeGetBlockCertificatesInterceptors() -> [ClientInterceptor<Concordium_V2_BlockHashInput, Concordium_V2_BlockCertificates>]

  /// - Returns: Interceptors to use when invoking 'getWinningBakersEpoch'.
  func makeGetWinningBakersEpochInterceptors() -> [ClientInterceptor<Concordium_V2_EpochRequest, Concordium_V2_WinningBaker>]

  /// - Returns: Interceptors to use when invoking 'getFirstBlockEpoch'.
  func makeGetFirstBlockEpochInterceptors() -> [ClientInterceptor<Concordium_V2_EpochRequest, Concordium_V2_BlockHash>]

  /// - Returns: Interceptors to use when invoking 'dryRun'.
  func makeDryRunInterceptors() -> [ClientInterceptor<Concordium_V2_DryRunRequest, Concordium_V2_DryRunResponse>]
}

internal enum Concordium_V2_QueriesClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Queries",
    fullName: "concordium.v2.Queries",
    methods: [
      Concordium_V2_QueriesClientMetadata.Methods.getBlocks,
      Concordium_V2_QueriesClientMetadata.Methods.getFinalizedBlocks,
      Concordium_V2_QueriesClientMetadata.Methods.getAccountInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getAccountList,
      Concordium_V2_QueriesClientMetadata.Methods.getModuleList,
      Concordium_V2_QueriesClientMetadata.Methods.getAncestors,
      Concordium_V2_QueriesClientMetadata.Methods.getModuleSource,
      Concordium_V2_QueriesClientMetadata.Methods.getInstanceList,
      Concordium_V2_QueriesClientMetadata.Methods.getInstanceInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getInstanceState,
      Concordium_V2_QueriesClientMetadata.Methods.instanceStateLookup,
      Concordium_V2_QueriesClientMetadata.Methods.getNextAccountSequenceNumber,
      Concordium_V2_QueriesClientMetadata.Methods.getConsensusInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockItemStatus,
      Concordium_V2_QueriesClientMetadata.Methods.getCryptographicParameters,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getBakerList,
      Concordium_V2_QueriesClientMetadata.Methods.getPoolInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegationInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getBlocksAtHeight,
      Concordium_V2_QueriesClientMetadata.Methods.getTokenomicsInfo,
      Concordium_V2_QueriesClientMetadata.Methods.invokeInstance,
      Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegators,
      Concordium_V2_QueriesClientMetadata.Methods.getPoolDelegatorsRewardPeriod,
      Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegators,
      Concordium_V2_QueriesClientMetadata.Methods.getPassiveDelegatorsRewardPeriod,
      Concordium_V2_QueriesClientMetadata.Methods.getBranches,
      Concordium_V2_QueriesClientMetadata.Methods.getElectionInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getIdentityProviders,
      Concordium_V2_QueriesClientMetadata.Methods.getAnonymityRevokers,
      Concordium_V2_QueriesClientMetadata.Methods.getAccountNonFinalizedTransactions,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockTransactionEvents,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockSpecialEvents,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockPendingUpdates,
      Concordium_V2_QueriesClientMetadata.Methods.getNextUpdateSequenceNumbers,
      Concordium_V2_QueriesClientMetadata.Methods.getBakerEarliestWinTime,
      Concordium_V2_QueriesClientMetadata.Methods.shutdown,
      Concordium_V2_QueriesClientMetadata.Methods.peerConnect,
      Concordium_V2_QueriesClientMetadata.Methods.peerDisconnect,
      Concordium_V2_QueriesClientMetadata.Methods.getBannedPeers,
      Concordium_V2_QueriesClientMetadata.Methods.banPeer,
      Concordium_V2_QueriesClientMetadata.Methods.unbanPeer,
      Concordium_V2_QueriesClientMetadata.Methods.dumpStart,
      Concordium_V2_QueriesClientMetadata.Methods.dumpStop,
      Concordium_V2_QueriesClientMetadata.Methods.getPeersInfo,
      Concordium_V2_QueriesClientMetadata.Methods.getNodeInfo,
      Concordium_V2_QueriesClientMetadata.Methods.sendBlockItem,
      Concordium_V2_QueriesClientMetadata.Methods.getAccountTransactionSignHash,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockChainParameters,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockFinalizationSummary,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockItems,
      Concordium_V2_QueriesClientMetadata.Methods.getBakersRewardPeriod,
      Concordium_V2_QueriesClientMetadata.Methods.getBlockCertificates,
      Concordium_V2_QueriesClientMetadata.Methods.getWinningBakersEpoch,
      Concordium_V2_QueriesClientMetadata.Methods.getFirstBlockEpoch,
      Concordium_V2_QueriesClientMetadata.Methods.dryRun,
    ]
  )

  internal enum Methods {
    internal static let getBlocks = GRPCMethodDescriptor(
      name: "GetBlocks",
      path: "/concordium.v2.Queries/GetBlocks",
      type: GRPCCallType.serverStreaming
    )

    internal static let getFinalizedBlocks = GRPCMethodDescriptor(
      name: "GetFinalizedBlocks",
      path: "/concordium.v2.Queries/GetFinalizedBlocks",
      type: GRPCCallType.serverStreaming
    )

    internal static let getAccountInfo = GRPCMethodDescriptor(
      name: "GetAccountInfo",
      path: "/concordium.v2.Queries/GetAccountInfo",
      type: GRPCCallType.unary
    )

    internal static let getAccountList = GRPCMethodDescriptor(
      name: "GetAccountList",
      path: "/concordium.v2.Queries/GetAccountList",
      type: GRPCCallType.serverStreaming
    )

    internal static let getModuleList = GRPCMethodDescriptor(
      name: "GetModuleList",
      path: "/concordium.v2.Queries/GetModuleList",
      type: GRPCCallType.serverStreaming
    )

    internal static let getAncestors = GRPCMethodDescriptor(
      name: "GetAncestors",
      path: "/concordium.v2.Queries/GetAncestors",
      type: GRPCCallType.serverStreaming
    )

    internal static let getModuleSource = GRPCMethodDescriptor(
      name: "GetModuleSource",
      path: "/concordium.v2.Queries/GetModuleSource",
      type: GRPCCallType.unary
    )

    internal static let getInstanceList = GRPCMethodDescriptor(
      name: "GetInstanceList",
      path: "/concordium.v2.Queries/GetInstanceList",
      type: GRPCCallType.serverStreaming
    )

    internal static let getInstanceInfo = GRPCMethodDescriptor(
      name: "GetInstanceInfo",
      path: "/concordium.v2.Queries/GetInstanceInfo",
      type: GRPCCallType.unary
    )

    internal static let getInstanceState = GRPCMethodDescriptor(
      name: "GetInstanceState",
      path: "/concordium.v2.Queries/GetInstanceState",
      type: GRPCCallType.serverStreaming
    )

    internal static let instanceStateLookup = GRPCMethodDescriptor(
      name: "InstanceStateLookup",
      path: "/concordium.v2.Queries/InstanceStateLookup",
      type: GRPCCallType.unary
    )

    internal static let getNextAccountSequenceNumber = GRPCMethodDescriptor(
      name: "GetNextAccountSequenceNumber",
      path: "/concordium.v2.Queries/GetNextAccountSequenceNumber",
      type: GRPCCallType.unary
    )

    internal static let getConsensusInfo = GRPCMethodDescriptor(
      name: "GetConsensusInfo",
      path: "/concordium.v2.Queries/GetConsensusInfo",
      type: GRPCCallType.unary
    )

    internal static let getBlockItemStatus = GRPCMethodDescriptor(
      name: "GetBlockItemStatus",
      path: "/concordium.v2.Queries/GetBlockItemStatus",
      type: GRPCCallType.unary
    )

    internal static let getCryptographicParameters = GRPCMethodDescriptor(
      name: "GetCryptographicParameters",
      path: "/concordium.v2.Queries/GetCryptographicParameters",
      type: GRPCCallType.unary
    )

    internal static let getBlockInfo = GRPCMethodDescriptor(
      name: "GetBlockInfo",
      path: "/concordium.v2.Queries/GetBlockInfo",
      type: GRPCCallType.unary
    )

    internal static let getBakerList = GRPCMethodDescriptor(
      name: "GetBakerList",
      path: "/concordium.v2.Queries/GetBakerList",
      type: GRPCCallType.serverStreaming
    )

    internal static let getPoolInfo = GRPCMethodDescriptor(
      name: "GetPoolInfo",
      path: "/concordium.v2.Queries/GetPoolInfo",
      type: GRPCCallType.unary
    )

    internal static let getPassiveDelegationInfo = GRPCMethodDescriptor(
      name: "GetPassiveDelegationInfo",
      path: "/concordium.v2.Queries/GetPassiveDelegationInfo",
      type: GRPCCallType.unary
    )

    internal static let getBlocksAtHeight = GRPCMethodDescriptor(
      name: "GetBlocksAtHeight",
      path: "/concordium.v2.Queries/GetBlocksAtHeight",
      type: GRPCCallType.unary
    )

    internal static let getTokenomicsInfo = GRPCMethodDescriptor(
      name: "GetTokenomicsInfo",
      path: "/concordium.v2.Queries/GetTokenomicsInfo",
      type: GRPCCallType.unary
    )

    internal static let invokeInstance = GRPCMethodDescriptor(
      name: "InvokeInstance",
      path: "/concordium.v2.Queries/InvokeInstance",
      type: GRPCCallType.unary
    )

    internal static let getPoolDelegators = GRPCMethodDescriptor(
      name: "GetPoolDelegators",
      path: "/concordium.v2.Queries/GetPoolDelegators",
      type: GRPCCallType.serverStreaming
    )

    internal static let getPoolDelegatorsRewardPeriod = GRPCMethodDescriptor(
      name: "GetPoolDelegatorsRewardPeriod",
      path: "/concordium.v2.Queries/GetPoolDelegatorsRewardPeriod",
      type: GRPCCallType.serverStreaming
    )

    internal static let getPassiveDelegators = GRPCMethodDescriptor(
      name: "GetPassiveDelegators",
      path: "/concordium.v2.Queries/GetPassiveDelegators",
      type: GRPCCallType.serverStreaming
    )

    internal static let getPassiveDelegatorsRewardPeriod = GRPCMethodDescriptor(
      name: "GetPassiveDelegatorsRewardPeriod",
      path: "/concordium.v2.Queries/GetPassiveDelegatorsRewardPeriod",
      type: GRPCCallType.serverStreaming
    )

    internal static let getBranches = GRPCMethodDescriptor(
      name: "GetBranches",
      path: "/concordium.v2.Queries/GetBranches",
      type: GRPCCallType.unary
    )

    internal static let getElectionInfo = GRPCMethodDescriptor(
      name: "GetElectionInfo",
      path: "/concordium.v2.Queries/GetElectionInfo",
      type: GRPCCallType.unary
    )

    internal static let getIdentityProviders = GRPCMethodDescriptor(
      name: "GetIdentityProviders",
      path: "/concordium.v2.Queries/GetIdentityProviders",
      type: GRPCCallType.serverStreaming
    )

    internal static let getAnonymityRevokers = GRPCMethodDescriptor(
      name: "GetAnonymityRevokers",
      path: "/concordium.v2.Queries/GetAnonymityRevokers",
      type: GRPCCallType.serverStreaming
    )

    internal static let getAccountNonFinalizedTransactions = GRPCMethodDescriptor(
      name: "GetAccountNonFinalizedTransactions",
      path: "/concordium.v2.Queries/GetAccountNonFinalizedTransactions",
      type: GRPCCallType.serverStreaming
    )

    internal static let getBlockTransactionEvents = GRPCMethodDescriptor(
      name: "GetBlockTransactionEvents",
      path: "/concordium.v2.Queries/GetBlockTransactionEvents",
      type: GRPCCallType.serverStreaming
    )

    internal static let getBlockSpecialEvents = GRPCMethodDescriptor(
      name: "GetBlockSpecialEvents",
      path: "/concordium.v2.Queries/GetBlockSpecialEvents",
      type: GRPCCallType.serverStreaming
    )

    internal static let getBlockPendingUpdates = GRPCMethodDescriptor(
      name: "GetBlockPendingUpdates",
      path: "/concordium.v2.Queries/GetBlockPendingUpdates",
      type: GRPCCallType.serverStreaming
    )

    internal static let getNextUpdateSequenceNumbers = GRPCMethodDescriptor(
      name: "GetNextUpdateSequenceNumbers",
      path: "/concordium.v2.Queries/GetNextUpdateSequenceNumbers",
      type: GRPCCallType.unary
    )

    internal static let getBakerEarliestWinTime = GRPCMethodDescriptor(
      name: "GetBakerEarliestWinTime",
      path: "/concordium.v2.Queries/GetBakerEarliestWinTime",
      type: GRPCCallType.unary
    )

    internal static let shutdown = GRPCMethodDescriptor(
      name: "Shutdown",
      path: "/concordium.v2.Queries/Shutdown",
      type: GRPCCallType.unary
    )

    internal static let peerConnect = GRPCMethodDescriptor(
      name: "PeerConnect",
      path: "/concordium.v2.Queries/PeerConnect",
      type: GRPCCallType.unary
    )

    internal static let peerDisconnect = GRPCMethodDescriptor(
      name: "PeerDisconnect",
      path: "/concordium.v2.Queries/PeerDisconnect",
      type: GRPCCallType.unary
    )

    internal static let getBannedPeers = GRPCMethodDescriptor(
      name: "GetBannedPeers",
      path: "/concordium.v2.Queries/GetBannedPeers",
      type: GRPCCallType.unary
    )

    internal static let banPeer = GRPCMethodDescriptor(
      name: "BanPeer",
      path: "/concordium.v2.Queries/BanPeer",
      type: GRPCCallType.unary
    )

    internal static let unbanPeer = GRPCMethodDescriptor(
      name: "UnbanPeer",
      path: "/concordium.v2.Queries/UnbanPeer",
      type: GRPCCallType.unary
    )

    internal static let dumpStart = GRPCMethodDescriptor(
      name: "DumpStart",
      path: "/concordium.v2.Queries/DumpStart",
      type: GRPCCallType.unary
    )

    internal static let dumpStop = GRPCMethodDescriptor(
      name: "DumpStop",
      path: "/concordium.v2.Queries/DumpStop",
      type: GRPCCallType.unary
    )

    internal static let getPeersInfo = GRPCMethodDescriptor(
      name: "GetPeersInfo",
      path: "/concordium.v2.Queries/GetPeersInfo",
      type: GRPCCallType.unary
    )

    internal static let getNodeInfo = GRPCMethodDescriptor(
      name: "GetNodeInfo",
      path: "/concordium.v2.Queries/GetNodeInfo",
      type: GRPCCallType.unary
    )

    internal static let sendBlockItem = GRPCMethodDescriptor(
      name: "SendBlockItem",
      path: "/concordium.v2.Queries/SendBlockItem",
      type: GRPCCallType.unary
    )

    internal static let getAccountTransactionSignHash = GRPCMethodDescriptor(
      name: "GetAccountTransactionSignHash",
      path: "/concordium.v2.Queries/GetAccountTransactionSignHash",
      type: GRPCCallType.unary
    )

    internal static let getBlockChainParameters = GRPCMethodDescriptor(
      name: "GetBlockChainParameters",
      path: "/concordium.v2.Queries/GetBlockChainParameters",
      type: GRPCCallType.unary
    )

    internal static let getBlockFinalizationSummary = GRPCMethodDescriptor(
      name: "GetBlockFinalizationSummary",
      path: "/concordium.v2.Queries/GetBlockFinalizationSummary",
      type: GRPCCallType.unary
    )

    internal static let getBlockItems = GRPCMethodDescriptor(
      name: "GetBlockItems",
      path: "/concordium.v2.Queries/GetBlockItems",
      type: GRPCCallType.serverStreaming
    )

    internal static let getBakersRewardPeriod = GRPCMethodDescriptor(
      name: "GetBakersRewardPeriod",
      path: "/concordium.v2.Queries/GetBakersRewardPeriod",
      type: GRPCCallType.serverStreaming
    )

    internal static let getBlockCertificates = GRPCMethodDescriptor(
      name: "GetBlockCertificates",
      path: "/concordium.v2.Queries/GetBlockCertificates",
      type: GRPCCallType.unary
    )

    internal static let getWinningBakersEpoch = GRPCMethodDescriptor(
      name: "GetWinningBakersEpoch",
      path: "/concordium.v2.Queries/GetWinningBakersEpoch",
      type: GRPCCallType.serverStreaming
    )

    internal static let getFirstBlockEpoch = GRPCMethodDescriptor(
      name: "GetFirstBlockEpoch",
      path: "/concordium.v2.Queries/GetFirstBlockEpoch",
      type: GRPCCallType.unary
    )

    internal static let dryRun = GRPCMethodDescriptor(
      name: "DryRun",
      path: "/concordium.v2.Queries/DryRun",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

